<rules>
  <rule key='org.codenarc.rule.basic.AssertWithinFinallyBlockRule' priority='MINOR'>
    <name><![CDATA[codenarc: assert within finally block rule]]></name>
    <configKey><![CDATA[AssertWithinFinallyBlock]]></configKey>
    <description>
      <![CDATA[Checks for assert statements within a finally block. An assert can throw an exception, hiding the original exception, if there is one.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.AssignmentInConditionalRule' priority='MINOR'>
    <name><![CDATA[codenarc: assignment in conditional rule]]></name>
    <configKey><![CDATA[AssignmentInConditional]]></configKey>
    <description>
      <![CDATA[An assignment operator (=) was used in a conditional test. This is usually a typo, and the comparison operator (==) was intended.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.BigDecimalInstantiationRule' priority='MINOR'>
    <name><![CDATA[codenarc: big decimal instantiation rule]]></name>
    <configKey><![CDATA[BigDecimalInstantiation]]></configKey>
    <description>
      <![CDATA[Checks for calls to the BigDecimal constructors that take a double parameter, which may result in an unexpected BigDecimal value.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.BitwiseOperatorInConditionalRule' priority='MINOR'>
    <name><![CDATA[codenarc: bitwise operator in conditional rule]]></name>
    <configKey><![CDATA[BitwiseOperatorInConditional]]></configKey>
    <description>
      <![CDATA[Checks for bitwise operations in conditionals, if you need to do a bitwise operation then it is best practive to extract a temp variable.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.BooleanGetBooleanRule' priority='MINOR'>
    <name><![CDATA[codenarc: boolean get boolean rule]]></name>
    <configKey><![CDATA[BooleanGetBoolean]]></configKey>
    <description>
      <![CDATA[This rule catches usages of java.lang.Boolean.getBoolean(String) which reads a boolean from the System properties. It is often mistakenly used to attempt to read user input or parse a String into a boolean. It is a poor piece of API to use; replace it with System.properties['prop'].]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.BrokenNullCheckRule' priority='MINOR'>
    <name><![CDATA[codenarc: broken null check rule]]></name>
    <configKey><![CDATA[BrokenNullCheck]]></configKey>
    <description><![CDATA[Looks for faulty checks for null that can cause a NullPointerException.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.BrokenOddnessCheckRule' priority='MINOR'>
    <name><![CDATA[codenarc: broken oddness check rule]]></name>
    <configKey><![CDATA[BrokenOddnessCheck]]></configKey>
    <description>
      <![CDATA[The code uses x % 2 == 1 to check to see if a value is odd, but this won't work for negative numbers (e.g., (-5) % 2 == -1). If this code is intending to check for oddness, consider using x & 1 == 1, or x % 2 != 0.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.ClassForNameRule' priority='MINOR'>
    <name><![CDATA[codenarc: class for name rule]]></name>
    <configKey><![CDATA[ClassForName]]></configKey>
    <description>
      <![CDATA[Using Class.forName(...) is a common way to add dynamic behavior to a system. However, using this method can cause resource leaks because the classes can be pinned in memory for long periods of time.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.ComparisonOfTwoConstantsRule' priority='MINOR'>
    <name><![CDATA[codenarc: comparison of two constants rule]]></name>
    <configKey><![CDATA[ComparisonOfTwoConstants]]></configKey>
    <description>
      <![CDATA[Checks for expressions where a comparison operator or equals() or compareTo() is used to compare two constants to each other or two literals that contain only constant values, e.g.: 23 == 67, Boolean.FALSE != false, 0.17 <= 0.99, "abc" > "ddd", [a:1] <=> [a:2], [1,2].equals([3,4]) or [a:false, b:true].compareTo(['a':34.5, b:Boolean.TRUE], where x is a variable.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.ComparisonWithSelfRule' priority='MINOR'>
    <name><![CDATA[codenarc: comparison with self rule]]></name>
    <configKey><![CDATA[ComparisonWithSelf]]></configKey>
    <description>
      <![CDATA[Checks for expressions where a comparison operator or equals() or compareTo() is used to compare a variable to itself, e.g.: x == x, x != x, x <=> x, x < x, x >= x, x.equals(x) or x.compareTo(x), where x is a variable.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.ConstantAssertExpressionRule' priority='MINOR'>
    <name><![CDATA[codenarc: constant assert expression rule]]></name>
    <configKey><![CDATA[ConstantAssertExpression]]></configKey>
    <description>
      <![CDATA[Checks for assert statements where the assert boolean condition expression is a constant or literal value.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.ConstantIfExpressionRule' priority='MINOR'>
    <name><![CDATA[codenarc: constant if expression rule]]></name>
    <configKey><![CDATA[ConstantIfExpression]]></configKey>
    <description>
      <![CDATA[Checks for if statements with a constant value for the if expression, such as true, false, null, or a literal constant value.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.ConstantTernaryExpressionRule' priority='MINOR'>
    <name><![CDATA[codenarc: constant ternary expression rule]]></name>
    <configKey><![CDATA[ConstantTernaryExpression]]></configKey>
    <description>
      <![CDATA[Checks for ternary expressions with a constant value for the boolean expression, such as true, false, null, or a literal constant value.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.DeadCodeRule' priority='MINOR'>
    <name><![CDATA[codenarc: dead code rule]]></name>
    <configKey><![CDATA[DeadCode]]></configKey>
    <description>
      <![CDATA[Dead code appears after a return statement or an exception is thrown. If code appears after one of these statements then it will never be executed and can be safely deleted.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.DoubleNegativeRule' priority='MINOR'>
    <name><![CDATA[codenarc: double negative rule]]></name>
    <configKey><![CDATA[DoubleNegative]]></configKey>
    <description>
      <![CDATA[There is no point in using a double negative, it is always positive. For instance !!x can always be simplified to x. And !(!x) can as well.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.DuplicateCaseStatementRule' priority='MINOR'>
    <name><![CDATA[codenarc: duplicate case statement rule]]></name>
    <configKey><![CDATA[DuplicateCaseStatement]]></configKey>
    <description>
      <![CDATA[Check for duplicate case statements in a switch block, such as two equal integers or strings.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.DuplicateMapKeyRule' priority='MINOR'>
    <name><![CDATA[codenarc: duplicate map key rule]]></name>
    <configKey><![CDATA[DuplicateMapKey]]></configKey>
    <description>
      <![CDATA[A map literal is created with duplicated key. The map entry will be overwritten.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.DuplicateSetValueRule' priority='MINOR'>
    <name><![CDATA[codenarc: duplicate set value rule]]></name>
    <configKey><![CDATA[DuplicateSetValue]]></configKey>
    <description>
      <![CDATA[A Set literal is created with duplicate constant value. A set cannot contain two elements with the same value.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.EmptyCatchBlockRule' priority='MINOR'>
    <name><![CDATA[codenarc: empty catch block rule]]></name>
    <configKey><![CDATA[EmptyCatchBlock]]></configKey>
    <description><![CDATA[In most cases, exceptions should not be caught and ignored (swallowed).]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.EmptyElseBlockRule' priority='MINOR'>
    <name><![CDATA[codenarc: empty else block rule]]></name>
    <configKey><![CDATA[EmptyElseBlock]]></configKey>
    <description><![CDATA[Empty else blocks are confusing and serve no purpose.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.EmptyFinallyBlockRule' priority='MINOR'>
    <name><![CDATA[codenarc: empty finally block rule]]></name>
    <configKey><![CDATA[EmptyFinallyBlock]]></configKey>
    <description><![CDATA[Empty finally blocks are confusing and serve no purpose.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.EmptyForStatementRule' priority='MINOR'>
    <name><![CDATA[codenarc: empty for statement rule]]></name>
    <configKey><![CDATA[EmptyForStatement]]></configKey>
    <description><![CDATA[Empty for statements are confusing and serve no purpose.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.EmptyIfStatementRule' priority='MINOR'>
    <name><![CDATA[codenarc: empty if statement rule]]></name>
    <configKey><![CDATA[EmptyIfStatement]]></configKey>
    <description><![CDATA[Empty if statements are confusing and serve no purpose.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.EmptyInstanceInitializerRule' priority='MINOR'>
    <name><![CDATA[codenarc: empty instance initializer rule]]></name>
    <configKey><![CDATA[EmptyInstanceInitializer]]></configKey>
    <description><![CDATA[An empty class instance initializer was found. It is safe to remove it.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.EmptyMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: empty method rule]]></name>
    <configKey><![CDATA[EmptyMethod]]></configKey>
    <description>
      <![CDATA[A method was found without an implementation. If the method is overriding or implementing a parent method, then mark it with the @Override annotation.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.EmptyStaticInitializerRule' priority='MINOR'>
    <name><![CDATA[codenarc: empty static initializer rule]]></name>
    <configKey><![CDATA[EmptyStaticInitializer]]></configKey>
    <description><![CDATA[An empty static initializer was found. It is safe to remove it.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.EmptySwitchStatementRule' priority='MINOR'>
    <name><![CDATA[codenarc: empty switch statement rule]]></name>
    <configKey><![CDATA[EmptySwitchStatement]]></configKey>
    <description><![CDATA[Empty switch statements are confusing and serve no purpose.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.EmptySynchronizedStatementRule' priority='MINOR'>
    <name><![CDATA[codenarc: empty synchronized statement rule]]></name>
    <configKey><![CDATA[EmptySynchronizedStatement]]></configKey>
    <description><![CDATA[Empty synchronized statements are confusing and serve no purpose.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.EmptyTryBlockRule' priority='MINOR'>
    <name><![CDATA[codenarc: empty try block rule]]></name>
    <configKey><![CDATA[EmptyTryBlock]]></configKey>
    <description><![CDATA[Empty try blocks are confusing and serve no purpose.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.EmptyWhileStatementRule' priority='MINOR'>
    <name><![CDATA[codenarc: empty while statement rule]]></name>
    <configKey><![CDATA[EmptyWhileStatement]]></configKey>
    <description><![CDATA[Empty while statements are confusing and serve no purpose.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.EqualsAndHashCodeRule' priority='MINOR'>
    <name><![CDATA[codenarc: equals and hash code rule]]></name>
    <configKey><![CDATA[EqualsAndHashCode]]></configKey>
    <description>
      <![CDATA[If either the equals(Object) or the hashCode() methods are overridden within a class, then both must be overridden.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.EqualsOverloadedRule' priority='MINOR'>
    <name><![CDATA[codenarc: equals overloaded rule]]></name>
    <configKey><![CDATA[EqualsOverloaded]]></configKey>
    <description>
      <![CDATA[The class has an equals method, but the parameter of the method is not of type Object. It is not overriding equals but instead overloading it.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.ExplicitGarbageCollectionRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit garbage collection rule]]></name>
    <configKey><![CDATA[ExplicitGarbageCollection]]></configKey>
    <description>
      <![CDATA[Calls to System.gc(), Runtime.getRuntime().gc(), and System.runFinalization() are not advised. Code should have the same behavior whether the garbage collection is disabled using the option -Xdisableexplicitgc or not. Moreover, "modern" jvms do a very good job handling garbage collections. If memory usage issues unrelated to memory leaks develop within an application, it should be dealt with JVM options rather than within the code itself.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.ForLoopShouldBeWhileLoopRule' priority='MINOR'>
    <name><![CDATA[codenarc: for loop should be while loop rule]]></name>
    <configKey><![CDATA[ForLoopShouldBeWhileLoop]]></configKey>
    <description>
      <![CDATA[A for loop without an init and update statement can be simplified to a while loop.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.HardCodedWindowsFileSeparatorRule' priority='MINOR'>
    <name><![CDATA[codenarc: hard coded windows file separator rule]]></name>
    <configKey><![CDATA[HardCodedWindowsFileSeparator]]></configKey>
    <description>
      <![CDATA[This rule finds usages of a Windows file separator within the constructor call of a File object. It is better to use the Unix file separator or use the File.separator constant.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.HardCodedWindowsRootDirectoryRule' priority='MINOR'>
    <name><![CDATA[codenarc: hard coded windows root directory rule]]></name>
    <configKey><![CDATA[HardCodedWindowsRootDirectory]]></configKey>
    <description>
      <![CDATA[This rule find cases where a File object is constructed with a windows-based path. This is not portable, and using the File.listRoots() method is a better alternative.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.IntegerGetIntegerRule' priority='MINOR'>
    <name><![CDATA[codenarc: integer get integer rule]]></name>
    <configKey><![CDATA[IntegerGetInteger]]></configKey>
    <description>
      <![CDATA[This rule catches usages of java.lang.Integer.getInteger(String, ...) which reads an Integer from the System properties. It is often mistakenly used to attempt to read user input or parse a String into an Integer. It is a poor piece of API to use; replace it with System.properties['prop'].]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.RandomDoubleCoercedToZeroRule' priority='MINOR'>
    <name><![CDATA[codenarc: random double coerced to zero rule]]></name>
    <configKey><![CDATA[RandomDoubleCoercedToZero]]></configKey>
    <description>
      <![CDATA[The Math.random() method returns a double result greater than or equal to 0.0 and less than 1.0. If you coerce this result into an Integer or int, then it is coerced to zero. Casting the result to int, or assigning it to an int field is probably a bug.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.RemoveAllOnSelfRule' priority='MINOR'>
    <name><![CDATA[codenarc: remove all on self rule]]></name>
    <configKey><![CDATA[RemoveAllOnSelf]]></configKey>
    <description>
      <![CDATA[Don't use removeAll to clear a collection. If you want to remove all elements from a collection c, use c.clear, not c.removeAll(c). Calling c.removeAll(c) to clear a collection is less clear, susceptible to errors from typos, less efficient and for some collections, might throw a ConcurrentModificationException.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.ReturnFromFinallyBlockRule' priority='MINOR'>
    <name><![CDATA[codenarc: return from finally block rule]]></name>
    <configKey><![CDATA[ReturnFromFinallyBlock]]></configKey>
    <description>
      <![CDATA[Returning from a finally block is confusing and can hide the original exception.]]></description>
  </rule>
  <rule key='org.codenarc.rule.basic.ThrowExceptionFromFinallyBlockRule' priority='MINOR'>
    <name><![CDATA[codenarc: throw exception from finally block rule]]></name>
    <configKey><![CDATA[ThrowExceptionFromFinallyBlock]]></configKey>
    <description>
      <![CDATA[Throwing an exception from a finally block is confusing and can hide the original exception.]]></description>
  </rule>
  <rule key='org.codenarc.rule.braces.ElseBlockBracesRule' priority='MINOR'>
    <name><![CDATA[codenarc: else block braces rule]]></name>
    <configKey><![CDATA[ElseBlockBraces]]></configKey>
    <description>
      <![CDATA[Use braces for else blocks, even for a single statement. By default, braces are not required for an else if it is followed immediately by an if. Set the bracesRequiredForElseIf property to true to require braces is that situation as well.]]></description>
  </rule>
  <rule key='org.codenarc.rule.braces.ForStatementBracesRule' priority='MINOR'>
    <name><![CDATA[codenarc: for statement braces rule]]></name>
    <configKey><![CDATA[ForStatementBraces]]></configKey>
    <description><![CDATA[Use braces for for statements, even for a single statement.]]></description>
  </rule>
  <rule key='org.codenarc.rule.braces.IfStatementBracesRule' priority='MINOR'>
    <name><![CDATA[codenarc: if statement braces rule]]></name>
    <configKey><![CDATA[IfStatementBraces]]></configKey>
    <description><![CDATA[Use braces for if statements, even for a single statement.]]></description>
  </rule>
  <rule key='org.codenarc.rule.braces.WhileStatementBracesRule' priority='MINOR'>
    <name><![CDATA[codenarc: while statement braces rule]]></name>
    <configKey><![CDATA[WhileStatementBraces]]></configKey>
    <description><![CDATA[Use braces for while statements, even for a single statement.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.BusyWaitRule' priority='MINOR'>
    <name><![CDATA[codenarc: busy wait rule]]></name>
    <configKey><![CDATA[BusyWait]]></configKey>
    <description>
      <![CDATA[Busy waiting (forcing a Thread.sleep() while waiting on a condition) should be avoided. Prefer using the gate and barrier objects in the java.util.concurrent package.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.DoubleCheckedLockingRule' priority='MINOR'>
    <name><![CDATA[codenarc: double checked locking rule]]></name>
    <configKey><![CDATA[DoubleCheckedLocking]]></configKey>
    <description>
      <![CDATA[This rule detects double checked locking, where a 'lock hint' is tested for null before initializing an object within a synchronized block. Double checked locking does not guarantee correctness and is an anti-pattern.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.InconsistentPropertyLockingRule' priority='MINOR'>
    <name><![CDATA[codenarc: inconsistent property locking rule]]></name>
    <configKey><![CDATA[InconsistentPropertyLocking]]></configKey>
    <description>
      <![CDATA[Class contains similarly-named get and set methods where one method of the pair is marked either @WithReadLock or @WithWriteLock and the other is not locked at all.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.InconsistentPropertySynchronizationRule' priority='MINOR'>
    <name><![CDATA[codenarc: inconsistent property synchronization rule]]></name>
    <configKey><![CDATA[InconsistentPropertySynchronization]]></configKey>
    <description>
      <![CDATA[Class contains similarly-named get and set methods where the set method is synchronized and the get method is not, or the get method is synchronized and the set method is not.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.NestedSynchronizationRule' priority='MINOR'>
    <name><![CDATA[codenarc: nested synchronization rule]]></name>
    <configKey><![CDATA[NestedSynchronization]]></configKey>
    <description>
      <![CDATA[Nested synchronized statements should be avoided. Nested synchronized statements are either useless (if the lock objects are identical) or prone to deadlock.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.StaticCalendarFieldRule' priority='MINOR'>
    <name><![CDATA[codenarc: static calendar field rule]]></name>
    <configKey><![CDATA[StaticCalendarField]]></configKey>
    <description>
      <![CDATA[Calendar objects should not be used as static fields. Calendars are inherently unsafe for multihtreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.StaticConnectionRule' priority='MINOR'>
    <name><![CDATA[codenarc: static connection rule]]></name>
    <configKey><![CDATA[StaticConnection]]></configKey>
    <description>
      <![CDATA[Creates violations when a java.sql.Connection object is used as a static field. Database connections stored in static fields will be shared between threads, which is unsafe and can lead to race conditions.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.StaticDateFormatFieldRule' priority='MINOR'>
    <name><![CDATA[codenarc: static date format field rule]]></name>
    <configKey><![CDATA[StaticDateFormatField]]></configKey>
    <description>
      <![CDATA[DateFormat objects should not be used as static fields. DateFormat are inherently unsafe for multithreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.StaticMatcherFieldRule' priority='MINOR'>
    <name><![CDATA[codenarc: static matcher field rule]]></name>
    <configKey><![CDATA[StaticMatcherField]]></configKey>
    <description>
      <![CDATA[Matcher objects should not be used as static fields. Matcher instances are inherently unsafe for multithreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.StaticSimpleDateFormatFieldRule' priority='MINOR'>
    <name><![CDATA[codenarc: static simple date format field rule]]></name>
    <configKey><![CDATA[StaticSimpleDateFormatField]]></configKey>
    <description>
      <![CDATA[SimpleDateFormat objects should not be used as static fields. SimpleDateFormat are inherently unsafe for multi-threaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.SynchronizedMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: synchronized method rule]]></name>
    <configKey><![CDATA[SynchronizedMethod]]></configKey>
    <description>
      <![CDATA[This rule reports uses of the synchronized keyword on methods. Synchronized methods are the same as synchronizing on 'this', which effectively make your synchronization policy public and modifiable by other objects. To avoid possibilities of deadlock, it is better to synchronize on internal objects.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.SynchronizedOnBoxedPrimitiveRule' priority='MINOR'>
    <name><![CDATA[codenarc: synchronized on boxed primitive rule]]></name>
    <configKey><![CDATA[SynchronizedOnBoxedPrimitive]]></configKey>
    <description>
      <![CDATA[The code synchronizes on a boxed primitive constant, such as an Integer. Since Integer objects can be cached and shared, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness and possible deadlock]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.SynchronizedOnGetClassRule' priority='MINOR'>
    <name><![CDATA[codenarc: synchronized on get class rule]]></name>
    <configKey><![CDATA[SynchronizedOnGetClass]]></configKey>
    <description>
      <![CDATA[Synchronization on getClass rather than class literal. This instance method synchronizes on this.getClass(). If this class is subclassed, subclasses will synchronize on the class object for the subclass, which isn't likely what was intended.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.SynchronizedOnReentrantLockRule' priority='MINOR'>
    <name><![CDATA[codenarc: synchronized on reentrant lock rule]]></name>
    <configKey><![CDATA[SynchronizedOnReentrantLock]]></configKey>
    <description>
      <![CDATA[Synchronizing on a ReentrantLock field is almost never the intended usage. A ReentrantLock should be obtained using the lock() method and released in a finally block using the unlock() method.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.SynchronizedOnStringRule' priority='MINOR'>
    <name><![CDATA[codenarc: synchronized on string rule]]></name>
    <configKey><![CDATA[SynchronizedOnString]]></configKey>
    <description>
      <![CDATA[Synchronization on a String field can lead to deadlock because Strings are interned by the JVM and can be shared.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.SynchronizedOnThisRule' priority='MINOR'>
    <name><![CDATA[codenarc: synchronized on this rule]]></name>
    <configKey><![CDATA[SynchronizedOnThis]]></configKey>
    <description>
      <![CDATA[This rule reports uses of the synchronized blocks where the synchronization reference is 'this'. Doing this effectively makes your synchronization policy public and modifiable by other objects. To avoid possibilities of deadlock, it is better to synchronize on internal objects.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.SynchronizedReadObjectMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: synchronized read object method rule]]></name>
    <configKey><![CDATA[SynchronizedReadObjectMethod]]></configKey>
    <description>
      <![CDATA[Catches Serializable classes that define a synchronized readObject method. By definition, an object created by deserialization is only reachable by one thread, and thus there is no need for readObject() to be synchronized. If the readObject() method itself is causing the object to become visible to another thread, that is an example of very dubious coding style.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.SystemRunFinalizersOnExitRule' priority='MINOR'>
    <name><![CDATA[codenarc: system run finalizers on exit rule]]></name>
    <configKey><![CDATA[SystemRunFinalizersOnExit]]></configKey>
    <description>
      <![CDATA[Method calls to System.runFinalizersOnExit() should not be allowed. This method is inherently non-thread-safe, may result in data corruption, deadlock, and may effect parts of the program far removed from it's call point. It is deprecated, and it's use strongly discouraged.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.ThreadGroupRule' priority='MINOR'>
    <name><![CDATA[codenarc: thread group rule]]></name>
    <configKey><![CDATA[ThreadGroup]]></configKey>
    <description>
      <![CDATA[Avoid using ThreadGroup; although it is intended to be used in a threaded environment it contains methods that are not thread safe.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.ThreadLocalNotStaticFinalRule' priority='MINOR'>
    <name><![CDATA[codenarc: thread local not static final rule]]></name>
    <configKey><![CDATA[ThreadLocalNotStaticFinal]]></configKey>
    <description>
      <![CDATA[ThreadLocal fields should be static and final. In the most common case a java.lang.ThreadLocal instance associates state with a thread. A non-static non-final java.lang.ThreadLocal field associates state with an instance-thread combination. This is seldom necessary and often a bug which can cause memory leaks and possibly incorrect behavior.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.ThreadYieldRule' priority='MINOR'>
    <name><![CDATA[codenarc: thread yield rule]]></name>
    <configKey><![CDATA[ThreadYield]]></configKey>
    <description>
      <![CDATA[Method calls to Thread.yield() should not be allowed. This method has no useful guaranteed semantics, and is often used by inexperienced programmers to mask race conditions.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.UseOfNotifyMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: use of notify method rule]]></name>
    <configKey><![CDATA[UseOfNotifyMethod]]></configKey>
    <description>
      <![CDATA[This code calls notify() rather than notifyAll(). Java monitors are often used for multiple conditions. Calling notify() only wakes up one thread, meaning that the thread woken up might not be the one waiting for the condition that the caller just satisfied.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.VolatileArrayFieldRule' priority='MINOR'>
    <name><![CDATA[codenarc: volatile array field rule]]></name>
    <configKey><![CDATA[VolatileArrayField]]></configKey>
    <description>
      <![CDATA[Volatile array fields are unsafe because the contents of the array are not treated as volatile. Changing the entire array reference is visible to other threads, but changing an array element is not.]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.VolatileLongOrDoubleFieldRule' priority='MINOR'>
    <name><![CDATA[codenarc: volatile long or double field rule]]></name>
    <configKey><![CDATA[VolatileLongOrDoubleField]]></configKey>
    <description>
      <![CDATA[Long or double fields should not be declared as volatile. Java specifies that reads and writes from such fields are atomic, but many JVM's have violated this specification. Unless you are certain of your JVM, it is better to synchronize access to such fields rather than declare them volatile. This rule flags fields marked volatile when their type is double or long or the name of their type is "Double" or "Long".]]></description>
  </rule>
  <rule key='org.codenarc.rule.concurrency.WaitOutsideOfWhileLoopRule' priority='MINOR'>
    <name><![CDATA[codenarc: wait outside of while loop rule]]></name>
    <configKey><![CDATA[WaitOutsideOfWhileLoop]]></configKey>
    <description>
      <![CDATA[Calls to Object.wait() must be within a while loop. Consider using the Java concurrency utilities instead of wait() and notify().]]></description>
  </rule>
  <rule key='org.codenarc.rule.convention.ConfusingTernaryRule' priority='MINOR'>
    <name><![CDATA[codenarc: confusing ternary rule]]></name>
    <configKey><![CDATA[ConfusingTernary]]></configKey>
    <description>
      <![CDATA[In a ternary expression avoid negation in the test. For example, rephrase: "(x != y) ? diff : same" as: "(x == y) ? same : diff". Consistent use of this rule makes the code easier to read. Also, this resolves trivial ordering problems, such as "does the error case go first?" or "does the common case go first?".]]></description>
  </rule>
  <rule key='org.codenarc.rule.convention.CouldBeElvisRule' priority='MINOR'>
    <name><![CDATA[codenarc: could be elvis rule]]></name>
    <configKey><![CDATA[CouldBeElvis]]></configKey>
    <description><![CDATA[Catch an if block that could be written as an elvis expression.]]></description>
  </rule>
  <rule key='org.codenarc.rule.convention.HashtableIsObsoleteRule' priority='MINOR'>
    <name><![CDATA[codenarc: hashtable is obsolete rule]]></name>
    <configKey><![CDATA[HashtableIsObsolete]]></configKey>
    <description>
      <![CDATA[The java.util.Hashtable class is effectively obsolete. Use the Java Collections Framework classes instead, including HashMap or ConcurrentHashMap. See the JDK javadoc.]]></description>
  </rule>
  <rule key='org.codenarc.rule.convention.IfStatementCouldBeTernaryRule' priority='MINOR'>
    <name><![CDATA[codenarc: if statement could be ternary rule]]></name>
    <configKey><![CDATA[IfStatementCouldBeTernary]]></configKey>
    <description>
      <![CDATA[Checks for if statements where both the if and else blocks contain only a single return statement with a constant or literal value]]></description>
  </rule>
  <rule key='org.codenarc.rule.convention.InvertedIfElseRule' priority='MINOR'>
    <name><![CDATA[codenarc: inverted if else rule]]></name>
    <configKey><![CDATA[InvertedIfElse]]></configKey>
    <description>
      <![CDATA[An inverted if-else statement is one in which there is a single if statement with a single else branch and the boolean test of the if is negated. For instance "if (!x) false else true". It is usually clearer to write this as "if (x) true else false".]]></description>
  </rule>
  <rule key='org.codenarc.rule.convention.LongLiteralWithLowerCaseLRule' priority='MINOR'>
    <name><![CDATA[codenarc: long literal with lower case l rule]]></name>
    <configKey><![CDATA[LongLiteralWithLowerCaseL]]></configKey>
    <description>
      <![CDATA[In Java and Groovy, you can specify long literals with the L or l character, for instance 55L or 24l. It is best practice to always use an uppercase L and never a lowercase l. This is because 11l rendered in some fonts may look like 111 instead of 11L.]]></description>
  </rule>
  <rule key='org.codenarc.rule.convention.ParameterReassignmentRule' priority='MINOR'>
    <name><![CDATA[codenarc: parameter reassignment rule]]></name>
    <configKey><![CDATA[ParameterReassignment]]></configKey>
    <description>
      <![CDATA[Checks for a method or closure parameter being reassigned to a new value within the body of the method/closure, which is a confusing and questionable practice. Use a temporary variable instead.]]></description>
  </rule>
  <rule key='org.codenarc.rule.convention.TernaryCouldBeElvisRule' priority='MINOR'>
    <name><![CDATA[codenarc: ternary could be elvis rule]]></name>
    <configKey><![CDATA[TernaryCouldBeElvis]]></configKey>
    <description>
      <![CDATA[Checks for ternary expressions where the boolean and true expressions are the same. These can be simplified to an Elvis expression.]]></description>
  </rule>
  <rule key='org.codenarc.rule.convention.VectorIsObsoleteRule' priority='MINOR'>
    <name><![CDATA[codenarc: vector is obsolete rule]]></name>
    <configKey><![CDATA[VectorIsObsolete]]></configKey>
    <description>
      <![CDATA[The java.util.Vector class is effectively obsolete. Use the Java Collections Framework classes instead, including ArrayList or Collections.synchronizedList(). See the JDK javadoc.]]></description>
  </rule>
  <rule key='org.codenarc.rule.design.AbstractClassWithoutAbstractMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: abstract class without abstract method rule]]></name>
    <configKey><![CDATA[AbstractClassWithoutAbstractMethod]]></configKey>
    <description>
      <![CDATA[The abstract class does not contain any abstract methods. An abstract class suggests an incomplete implementation, which is to be completed by subclasses implementing the abstract methods. If the class is intended to be used as a base class only (not to be instantiated direcly) a protected constructor can be provided prevent direct instantiation.]]></description>
  </rule>
  <rule key='org.codenarc.rule.design.AbstractClassWithPublicConstructorRule' priority='MINOR'>
    <name><![CDATA[codenarc: abstract class with public constructor rule]]></name>
    <configKey><![CDATA[AbstractClassWithPublicConstructor]]></configKey>
    <description>
      <![CDATA[Checks for abstract classes that define a public constructor, which is useless and confusing.]]></description>
  </rule>
  <rule key='org.codenarc.rule.design.BooleanMethodReturnsNullRule' priority='MINOR'>
    <name><![CDATA[codenarc: boolean method returns null rule]]></name>
    <configKey><![CDATA[BooleanMethodReturnsNull]]></configKey>
    <description>
      <![CDATA[Method with Boolean return type returns explicit null. A method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen. This method can be invoked as though it returned a value of type boolean, and the compiler will insert automatic unboxing of the Boolean value. If a null value is returned, this will result in a NullPointerException.]]></description>
  </rule>
  <rule key='org.codenarc.rule.design.BuilderMethodWithSideEffectsRule' priority='MINOR'>
    <name><![CDATA[codenarc: builder method with side effects rule]]></name>
    <configKey><![CDATA[BuilderMethodWithSideEffects]]></configKey>
    <description>
      <![CDATA[A builder method is defined as one that creates objects. As such, they should never be of void return type. If a method is named build, create, or make, then it should always return a value.]]></description>
  </rule>
  <rule key='org.codenarc.rule.design.CloneableWithoutCloneRule' priority='MINOR'>
    <name><![CDATA[codenarc: cloneable without clone rule]]></name>
    <configKey><![CDATA[CloneableWithoutClone]]></configKey>
    <description><![CDATA[A class that implements java.lang.Cloneable should define a clone() method.]]></description>
  </rule>
  <rule key='org.codenarc.rule.design.CloseWithoutCloseableRule' priority='MINOR'>
    <name><![CDATA[codenarc: close without closeable rule]]></name>
    <configKey><![CDATA[CloseWithoutCloseable]]></configKey>
    <description>
      <![CDATA[If a class defines a "void close()" then that class should implement java.io.Closeable.]]></description>
  </rule>
  <rule key='org.codenarc.rule.design.CompareToWithoutComparableRule' priority='MINOR'>
    <name><![CDATA[codenarc: compare to without comparable rule]]></name>
    <configKey><![CDATA[CompareToWithoutComparable]]></configKey>
    <description>
      <![CDATA[If you implement a compareTo method then you should also implement the Comparable interface. If you don't then you could possibly get an exception if the Groovy == operator is invoked on your object. This is an issue fixed in Groovy 1.8 but present in previous versions.]]></description>
  </rule>
  <rule key='org.codenarc.rule.design.ConstantsOnlyInterfaceRule' priority='MINOR'>
    <name><![CDATA[codenarc: constants only interface rule]]></name>
    <configKey><![CDATA[ConstantsOnlyInterface]]></configKey>
    <description>
      <![CDATA[An interface should be used only to model a behaviour of a class: using an interface as a container of constants is a poor usage pattern.]]></description>
  </rule>
  <rule key='org.codenarc.rule.design.EmptyMethodInAbstractClassRule' priority='MINOR'>
    <name><![CDATA[codenarc: empty method in abstract class rule]]></name>
    <configKey><![CDATA[EmptyMethodInAbstractClass]]></configKey>
    <description>
      <![CDATA[An empty method in an abstract class should be abstract instead, as developer may rely on this empty implementation rather than code the appropriate one.]]></description>
  </rule>
  <rule key='org.codenarc.rule.design.FinalClassWithProtectedMemberRule' priority='MINOR'>
    <name><![CDATA[codenarc: final class with protected member rule]]></name>
    <configKey><![CDATA[FinalClassWithProtectedMember]]></configKey>
    <description>
      <![CDATA[This rule finds classes marked final that contain protected methods. If a class is final then it may not be subclassed, and there is therefore no point in having a method with protected visibility. Either the class should not be final or the method should be private or protected.]]></description>
  </rule>
  <rule key='org.codenarc.rule.design.ImplementationAsTypeRule' priority='MINOR'>
    <name><![CDATA[codenarc: implementation as type rule]]></name>
    <configKey><![CDATA[ImplementationAsType]]></configKey>
    <description>
      <![CDATA[Checks for use of a predefined set of concrete classes (e.g. ArrayList, Hashtable, ConcurrentHashMap) when specifying the type of a method parameter, closure parameter, constructor parameter, method return type or field type. The associated interfaces should be used to specify the type instead.]]></description>
  </rule>
  <rule key='org.codenarc.rule.design.PrivateFieldCouldBeFinalRule' priority='MINOR'>
    <name><![CDATA[codenarc: private field could be final rule]]></name>
    <configKey><![CDATA[PrivateFieldCouldBeFinal]]></configKey>
    <description>
      <![CDATA[Checks for private fields that are only set within a constructor or field initializer. Such fields can safely be made final.]]></description>
  </rule>
  <rule key='org.codenarc.rule.design.PublicInstanceFieldRule' priority='MINOR'>
    <name><![CDATA[codenarc: public instance field rule]]></name>
    <configKey><![CDATA[PublicInstanceField]]></configKey>
    <description><![CDATA[Using public fields is considered to be a bad design. Use properties instead.]]></description>
  </rule>
  <rule key='org.codenarc.rule.design.ReturnsNullInsteadOfEmptyArrayRule' priority='MINOR'>
    <name><![CDATA[codenarc: returns null instead of empty array rule]]></name>
    <configKey><![CDATA[ReturnsNullInsteadOfEmptyArray]]></configKey>
    <description>
      <![CDATA[Consider returning a zero length array rather than null. It is often a better design to return a length zero array rather than a null reference to indicate that there are no results (i.e., an empty list of results). This way, no explicit check for null is needed by clients of the method.]]></description>
  </rule>
  <rule key='org.codenarc.rule.design.ReturnsNullInsteadOfEmptyCollectionRule' priority='MINOR'>
    <name><![CDATA[codenarc: returns null instead of empty collection rule]]></name>
    <configKey><![CDATA[ReturnsNullInsteadOfEmptyCollection]]></configKey>
    <description>
      <![CDATA[Consider returning a zero length collection rather than null. It is often a better design to return a length zero collection rather than a null reference to indicate that there are no results (i.e., an empty list of results). This way, no explicit check for null is needed by clients of the method.]]></description>
  </rule>
  <rule key='org.codenarc.rule.design.SimpleDateFormatMissingLocaleRule' priority='MINOR'>
    <name><![CDATA[codenarc: simple date format missing locale rule]]></name>
    <configKey><![CDATA[SimpleDateFormatMissingLocale]]></configKey>
    <description>
      <![CDATA[Be sure to specify a Locale when creating a new instance of SimpleDateFormat; the class is locale-sensitive. If you instantiate SimpleDateFormat without a Locale parameter, it will format the date and time according to the default Locale. Both the pattern and the Locale determine the format. For the same pattern, SimpleDateFormat may format a date and time differently if the Locale varies.]]></description>
  </rule>
  <rule key='org.codenarc.rule.design.StatelessSingletonRule' priority='MINOR'>
    <name><![CDATA[codenarc: stateless singleton rule]]></name>
    <configKey><![CDATA[StatelessSingleton]]></configKey>
    <description>
      <![CDATA[There is no point in creating a stateless Singleton because there is nothing within the class that needs guarding and no side effects to calling the constructor. Just create new instances of the object or write a Utility class with static methods.]]></description>
  </rule>
  <rule key='org.codenarc.rule.dry.DuplicateListLiteralRule' priority='MINOR'>
    <name><![CDATA[codenarc: duplicate list literal rule]]></name>
    <configKey><![CDATA[DuplicateListLiteral]]></configKey>
    <description>
      <![CDATA[Code containing duplicate List literals can usually be improved by declaring the List as a constant field.]]></description>
  </rule>
  <rule key='org.codenarc.rule.dry.DuplicateMapLiteralRule' priority='MINOR'>
    <name><![CDATA[codenarc: duplicate map literal rule]]></name>
    <configKey><![CDATA[DuplicateMapLiteral]]></configKey>
    <description>
      <![CDATA[Code containing duplicate Map literals can usually be improved by declaring the Map as a constant field.]]></description>
  </rule>
  <rule key='org.codenarc.rule.dry.DuplicateNumberLiteralRule' priority='MINOR'>
    <name><![CDATA[codenarc: duplicate number literal rule]]></name>
    <configKey><![CDATA[DuplicateNumberLiteral]]></configKey>
    <description>
      <![CDATA[Code containing duplicate number literals can usually be improved by declaring the number as a constant field.  The ignoreNumbers property (${rule.ignoreNumbers}) can optionally specify a comma-separated list of numbers to ignore.]]></description>
  </rule>
  <rule key='org.codenarc.rule.dry.DuplicateStringLiteralRule' priority='MINOR'>
    <name><![CDATA[codenarc: duplicate string literal rule]]></name>
    <configKey><![CDATA[DuplicateStringLiteral]]></configKey>
    <description>
      <![CDATA[Code containing duplicate String literals can usually be improved by declaring the String as a constant field. The ignoreStrings property (${rule.ignoreStrings}) can optionally specify a comma-separated list of Strings to ignore.]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.CatchArrayIndexOutOfBoundsExceptionRule' priority='MINOR'>
    <name><![CDATA[codenarc: catch array index out of bounds exception rule]]></name>
    <configKey><![CDATA[CatchArrayIndexOutOfBoundsException]]></configKey>
    <description>
      <![CDATA[Check the size of the array before accessing an array element rather than catching ArrayIndexOutOfBoundsException.]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.CatchErrorRule' priority='MINOR'>
    <name><![CDATA[codenarc: catch error rule]]></name>
    <configKey><![CDATA[CatchError]]></configKey>
    <description>
      <![CDATA[Catching Error is dangerous; it can catch exceptions such as ThreadDeath and OutOfMemoryError.]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.CatchExceptionRule' priority='MINOR'>
    <name><![CDATA[codenarc: catch exception rule]]></name>
    <configKey><![CDATA[CatchException]]></configKey>
    <description>
      <![CDATA[Catching Exception is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.CatchIllegalMonitorStateExceptionRule' priority='MINOR'>
    <name><![CDATA[codenarc: catch illegal monitor state exception rule]]></name>
    <configKey><![CDATA[CatchIllegalMonitorStateException]]></configKey>
    <description>
      <![CDATA[Dubious catching of IllegalMonitorStateException. IllegalMonitorStateException is generally only thrown in case of a design flaw in your code (calling wait or notify on an object you do not hold a lock on).]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.CatchIndexOutOfBoundsExceptionRule' priority='MINOR'>
    <name><![CDATA[codenarc: catch index out of bounds exception rule]]></name>
    <configKey><![CDATA[CatchIndexOutOfBoundsException]]></configKey>
    <description>
      <![CDATA[Check that an index is valid before accessing an indexed element rather than catching IndexOutOfBoundsException.]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.CatchNullPointerExceptionRule' priority='MINOR'>
    <name><![CDATA[codenarc: catch null pointer exception rule]]></name>
    <configKey><![CDATA[CatchNullPointerException]]></configKey>
    <description>
      <![CDATA[Catching NullPointerException is never appropriate. It should be avoided in the first place with proper null checking, and it can mask underlying errors.]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.CatchRuntimeExceptionRule' priority='MINOR'>
    <name><![CDATA[codenarc: catch runtime exception rule]]></name>
    <configKey><![CDATA[CatchRuntimeException]]></configKey>
    <description>
      <![CDATA[Catching RuntimeException is often too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code.]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.CatchThrowableRule' priority='MINOR'>
    <name><![CDATA[codenarc: catch throwable rule]]></name>
    <configKey><![CDATA[CatchThrowable]]></configKey>
    <description>
      <![CDATA[Catching Throwable is dangerous; it can catch exceptions such as ThreadDeath and OutOfMemoryError.]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.ConfusingClassNamedExceptionRule' priority='MINOR'>
    <name><![CDATA[codenarc: confusing class named exception rule]]></name>
    <configKey><![CDATA[ConfusingClassNamedException]]></configKey>
    <description>
      <![CDATA[This class is not derived from another exception, but ends with 'Exception'. This will be confusing to users of this class.]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.ExceptionExtendsErrorRule' priority='MINOR'>
    <name><![CDATA[codenarc: exception extends error rule]]></name>
    <configKey><![CDATA[ExceptionExtendsError]]></configKey>
    <description><![CDATA[Errors are system exceptions. Do not extend them.]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.ExceptionNotThrownRule' priority='MINOR'>
    <name><![CDATA[codenarc: exception not thrown rule]]></name>
    <configKey><![CDATA[ExceptionNotThrown]]></configKey>
    <description>
      <![CDATA[Checks for an exception constructor call without a throw as the last statement within a catch block.]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.MissingNewInThrowStatementRule' priority='MINOR'>
    <name><![CDATA[codenarc: missing new in throw statement rule]]></name>
    <configKey><![CDATA[MissingNewInThrowStatement]]></configKey>
    <description>
      <![CDATA[A common Groovy mistake when throwing exceptions is to forget the new keyword. For instance, "throw RuntimeException()" instead of "throw new RuntimeException()". If the error path is not unit tested then the production system will throw a Method Missing exception and hide the root cause. This rule finds constructs like "throw RuntimeException()" that look like a new keyword was meant to be used but forgotten.]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.ReturnNullFromCatchBlockRule' priority='MINOR'>
    <name><![CDATA[codenarc: return null from catch block rule]]></name>
    <configKey><![CDATA[ReturnNullFromCatchBlock]]></configKey>
    <description>
      <![CDATA[Returning null from a catch block often masks errors and requires the client to handle error codes. In some coding styles this is discouraged.]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.SwallowThreadDeathRule' priority='MINOR'>
    <name><![CDATA[codenarc: swallow thread death rule]]></name>
    <configKey><![CDATA[SwallowThreadDeath]]></configKey>
    <description><![CDATA[Checks for code that catches ThreadDeath without re-throwing it.]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.ThrowErrorRule' priority='MINOR'>
    <name><![CDATA[codenarc: throw error rule]]></name>
    <configKey><![CDATA[ThrowError]]></configKey>
    <description><![CDATA[Checks for throwing an instance of java.lang.Error.]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.ThrowExceptionRule' priority='MINOR'>
    <name><![CDATA[codenarc: throw exception rule]]></name>
    <configKey><![CDATA[ThrowException]]></configKey>
    <description><![CDATA[Checks for throwing an instance of java.lang.Exception.]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.ThrowNullPointerExceptionRule' priority='MINOR'>
    <name><![CDATA[codenarc: throw null pointer exception rule]]></name>
    <configKey><![CDATA[ThrowNullPointerException]]></configKey>
    <description><![CDATA[Checks for throwing an instance of java.lang.NullPointerException.]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.ThrowRuntimeExceptionRule' priority='MINOR'>
    <name><![CDATA[codenarc: throw runtime exception rule]]></name>
    <configKey><![CDATA[ThrowRuntimeException]]></configKey>
    <description><![CDATA[Checks for throwing an instance of java.lang.RuntimeException.]]></description>
  </rule>
  <rule key='org.codenarc.rule.exceptions.ThrowThrowableRule' priority='MINOR'>
    <name><![CDATA[codenarc: throw throwable rule]]></name>
    <configKey><![CDATA[ThrowThrowable]]></configKey>
    <description><![CDATA[Checks for throwing an instance of java.lang.Throwable.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.BracesForClassRule' priority='MINOR'>
    <name><![CDATA[codenarc: braces for class rule]]></name>
    <configKey><![CDATA[BracesForClass]]></configKey>
    <description>
      <![CDATA[Checks the location of the opening brace ({) for classes. By default, requires them on the same line, but the sameLine property can be set to false to override this.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.BracesForForLoopRule' priority='MINOR'>
    <name><![CDATA[codenarc: braces for for loop rule]]></name>
    <configKey><![CDATA[BracesForForLoop]]></configKey>
    <description>
      <![CDATA[Checks the location of the opening brace ({) for for loops. By default, requires them on the same line, but the sameLine property can be set to false to override this.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.BracesForIfElseRule' priority='MINOR'>
    <name><![CDATA[codenarc: braces for if else rule]]></name>
    <configKey><![CDATA[BracesForIfElse]]></configKey>
    <description>
      <![CDATA[Checks the location of the opening brace ({) for if statements. By default, requires them on the same line, but the sameLine property can be set to false to override this.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.BracesForMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: braces for method rule]]></name>
    <configKey><![CDATA[BracesForMethod]]></configKey>
    <description>
      <![CDATA[Checks the location of the opening brace ({) for constructors and methods. By default, requires them on the same line, but the sameLine property can be set to false to override this.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.BracesForTryCatchFinallyRule' priority='MINOR'>
    <name><![CDATA[codenarc: braces for try catch finally rule]]></name>
    <configKey><![CDATA[BracesForTryCatchFinally]]></configKey>
    <description>
      <![CDATA[Checks the location of the opening brace ({) for try statements. By default, requires them on the line, but the sameLine property can be set to false to override this.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.ClassJavadocRule' priority='MINOR'>
    <name><![CDATA[codenarc: class javadoc rule]]></name>
    <configKey><![CDATA[ClassJavadoc]]></configKey>
    <description>
      <![CDATA[Makes sure each class and interface definition is preceded by javadoc. Enum definitions are not checked, due to strange behavior in the Groovy AST.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.LineLengthRule' priority='MINOR'>
    <name><![CDATA[codenarc: line length rule]]></name>
    <configKey><![CDATA[LineLength]]></configKey>
    <description>
      <![CDATA[Checks the maximum length for each line of source code. It checks for number of characters, so lines that include tabs may appear longer than the allowed number when viewing the file. The maximum line length can be configured by setting the length property, which defaults to 120.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.SpaceAfterCatchRule' priority='MINOR'>
    <name><![CDATA[codenarc: space after catch rule]]></name>
    <configKey><![CDATA[SpaceAfterCatch]]></configKey>
    <description>
      <![CDATA[Check that there is exactly one space (blank) after the catch keyword and before the opening parenthesis.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.SpaceAfterClosingBraceRule' priority='MINOR'>
    <name><![CDATA[codenarc: space after closing brace rule]]></name>
    <configKey><![CDATA[SpaceAfterClosingBrace]]></configKey>
    <description>
      <![CDATA[Check that there is at least one space (blank) or whitespace after each closing brace ("}") for method/class/interface declarations, closure expressions and block statements.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.SpaceAfterCommaRule' priority='MINOR'>
    <name><![CDATA[codenarc: space after comma rule]]></name>
    <configKey><![CDATA[SpaceAfterComma]]></configKey>
    <description>
      <![CDATA[Checks that there is at least one space or whitespace following each comma. That includes checks for method and closure declaration parameter lists, method call parameter lists, Map literals and List literals.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.SpaceAfterForRule' priority='MINOR'>
    <name><![CDATA[codenarc: space after for rule]]></name>
    <configKey><![CDATA[SpaceAfterFor]]></configKey>
    <description>
      <![CDATA[Check that there is exactly one space (blank) after the for keyword and before the opening parenthesis.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.SpaceAfterIfRule' priority='MINOR'>
    <name><![CDATA[codenarc: space after if rule]]></name>
    <configKey><![CDATA[SpaceAfterIf]]></configKey>
    <description>
      <![CDATA[Check that there is exactly one space (blank) after the if keyword and before the opening parenthesis.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.SpaceAfterOpeningBraceRule' priority='MINOR'>
    <name><![CDATA[codenarc: space after opening brace rule]]></name>
    <configKey><![CDATA[SpaceAfterOpeningBrace]]></configKey>
    <description>
      <![CDATA[Check that there is at least one space (blank) or whitespace after each opening brace ("{") for method/class/interface declarations, closure expressions and block statements.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.SpaceAfterSemicolonRule' priority='MINOR'>
    <name><![CDATA[codenarc: space after semicolon rule]]></name>
    <configKey><![CDATA[SpaceAfterSemicolon]]></configKey>
    <description>
      <![CDATA[Checks that there is at least one space or whitespace following each semicolon separating multiple statements on a single line or the clauses within a classic for loop.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.SpaceAfterSwitchRule' priority='MINOR'>
    <name><![CDATA[codenarc: space after switch rule]]></name>
    <configKey><![CDATA[SpaceAfterSwitch]]></configKey>
    <description>
      <![CDATA[Check that there is exactly one space (blank) after the switch keyword and before the opening parenthesis.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.SpaceAfterWhileRule' priority='MINOR'>
    <name><![CDATA[codenarc: space after while rule]]></name>
    <configKey><![CDATA[SpaceAfterWhile]]></configKey>
    <description>
      <![CDATA[Check that there is exactly one space (blank) after the while keyword and before the opening parenthesis.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.SpaceAroundOperatorRule' priority='MINOR'>
    <name><![CDATA[codenarc: space around operator rule]]></name>
    <configKey><![CDATA[SpaceAroundOperator]]></configKey>
    <description>
      <![CDATA[Check that there is at least one space (blank) or whitespace around each binary operator.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.SpaceBeforeClosingBraceRule' priority='MINOR'>
    <name><![CDATA[codenarc: space before closing brace rule]]></name>
    <configKey><![CDATA[SpaceBeforeClosingBrace]]></configKey>
    <description>
      <![CDATA[Check that there is at least one space (blank) or whitespace before each closing brace ("}") for method/class/interface declarations, closure expressions and block statements.]]></description>
  </rule>
  <rule key='org.codenarc.rule.formatting.SpaceBeforeOpeningBraceRule' priority='MINOR'>
    <name><![CDATA[codenarc: space before opening brace rule]]></name>
    <configKey><![CDATA[SpaceBeforeOpeningBrace]]></configKey>
    <description>
      <![CDATA[Check that there is at least one space (blank) or whitespace before each opening brace ("{") for method/class/interface declarations, closure expressions and block statements.]]></description>
  </rule>
  <rule key='org.codenarc.rule.generic.IllegalClassReferenceRule' priority='MINOR'>
    <name><![CDATA[codenarc: illegal class reference rule]]></name>
    <configKey><![CDATA[IllegalClassReference]]></configKey>
    <description><![CDATA[Checks for reference to any of the classes configured in classNames.]]></description>
  </rule>
  <rule key='org.codenarc.rule.generic.IllegalPackageReferenceRule' priority='MINOR'>
    <name><![CDATA[codenarc: illegal package reference rule]]></name>
    <configKey><![CDATA[IllegalPackageReference]]></configKey>
    <description><![CDATA[Checks for reference to any of the packages configured in packageNames.]]></description>
  </rule>
  <rule key='org.codenarc.rule.generic.IllegalRegexRule' priority='MINOR'>
    <name><![CDATA[codenarc: illegal regex rule]]></name>
    <configKey><![CDATA[IllegalRegex]]></configKey>
    <description>
      <![CDATA[Checks for a specified illegal regular expression within the source code. The regex property specifies the regular expression to check for. It is required and cannot be null or empty.]]></description>
  </rule>
  <rule key='org.codenarc.rule.generic.RequiredRegexRule' priority='MINOR'>
    <name><![CDATA[codenarc: required regex rule]]></name>
    <configKey><![CDATA[RequiredRegex]]></configKey>
    <description>
      <![CDATA[Checks for a specified regular expression that must exist within the source code. The regex property specifies the regular expression to check for. It is required and cannot be null or empty.]]></description>
  </rule>
  <rule key='org.codenarc.rule.generic.RequiredStringRule' priority='MINOR'>
    <name><![CDATA[codenarc: required string rule]]></name>
    <configKey><![CDATA[RequiredString]]></configKey>
    <description>
      <![CDATA[Checks for a specified text string that must exist within the source code. The string property specifies the String to check for. It is required and cannot be null or empty.]]></description>
  </rule>
  <rule key='org.codenarc.rule.generic.StatelessClassRule' priority='MINOR'>
    <name><![CDATA[codenarc: stateless class rule]]></name>
    <configKey><![CDATA[StatelessClass]]></configKey>
    <description>
      <![CDATA[Checks for fields on classes that should remain "stateless" and reentrant. The ignoreFieldNames property (${rule.ignoreFieldNames}) specifies one or more field names that should be ignored. The ignoreFieldTypes property specifies one or more field type names that should be ignored. Both can optionally contain wildcard characters ('*' or '?').]]></description>
  </rule>
  <rule key='org.codenarc.rule.grails.GrailsDomainHasEqualsRule' priority='MINOR'>
    <name><![CDATA[codenarc: grails domain has equals rule]]></name>
    <configKey><![CDATA[GrailsDomainHasEquals]]></configKey>
    <description><![CDATA[Checks that Grails domain classes redefine equals().]]></description>
  </rule>
  <rule key='org.codenarc.rule.grails.GrailsDomainHasToStringRule' priority='MINOR'>
    <name><![CDATA[codenarc: grails domain has to string rule]]></name>
    <configKey><![CDATA[GrailsDomainHasToString]]></configKey>
    <description><![CDATA[Checks that Grails domain classes redefine toString()]]></description>
  </rule>
  <rule key='org.codenarc.rule.grails.GrailsDuplicateConstraintRule' priority='MINOR'>
    <name><![CDATA[codenarc: grails duplicate constraint rule]]></name>
    <configKey><![CDATA[GrailsDuplicateConstraint]]></configKey>
    <description><![CDATA[Check for duplicate entry in domain class constraints]]></description>
  </rule>
  <rule key='org.codenarc.rule.grails.GrailsDuplicateMappingRule' priority='MINOR'>
    <name><![CDATA[codenarc: grails duplicate mapping rule]]></name>
    <configKey><![CDATA[GrailsDuplicateMapping]]></configKey>
    <description><![CDATA[Check for duplicate name in a domain class mapping]]></description>
  </rule>
  <rule key='org.codenarc.rule.grails.GrailsPublicControllerMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: grails public controller method rule]]></name>
    <configKey><![CDATA[GrailsPublicControllerMethod]]></configKey>
    <description>
      <![CDATA[Checks for public methods on Grails controller classes. Static methods are ignored.]]></description>
  </rule>
  <rule key='org.codenarc.rule.grails.GrailsServletContextReferenceRule' priority='MINOR'>
    <name><![CDATA[codenarc: grails servlet context reference rule]]></name>
    <configKey><![CDATA[GrailsServletContextReference]]></configKey>
    <description>
      <![CDATA[Checks for references to the servletContext object from within Grails controller and taglib classes.]]></description>
  </rule>
  <rule key='org.codenarc.rule.grails.GrailsSessionReferenceRule' priority='MINOR'>
    <name><![CDATA[codenarc: grails session reference rule]]></name>
    <configKey><![CDATA[GrailsSessionReference]]></configKey>
    <description>
      <![CDATA[Checks for references to the session object from within Grails controller and taglib classes. [DEPRECATED]]]></description>
  </rule>
  <rule key='org.codenarc.rule.grails.GrailsStatelessServiceRule' priority='MINOR'>
    <name><![CDATA[codenarc: grails stateless service rule]]></name>
    <configKey><![CDATA[GrailsStatelessService]]></configKey>
    <description>
      <![CDATA[Checks for fields on Grails service classes. Grails service classes are singletons, by default, and so they should be reentrant and typically stateless. The ignoreFieldNames property (${rule.ignoreFieldNames}) specifies one or more field names that should be ignored. The ignoreFieldTypes property (${rule.ignoreFieldTypes}) specifies one or more field type names that should be ignored. Both can optionally contain wildcard characters ('*' or '?').]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.AssignCollectionSortRule' priority='MINOR'>
    <name><![CDATA[codenarc: assign collection sort rule]]></name>
    <configKey><![CDATA[AssignCollectionSort]]></configKey>
    <description>
      <![CDATA[The Collections.sort() method mutates the list and returns the list as a value. If you are assigning the result of sort() to a variable, then you probably don't realize that you're also modifying the original list as well. This is frequently the cause of subtle bugs.]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.AssignCollectionUniqueRule' priority='MINOR'>
    <name><![CDATA[codenarc: assign collection unique rule]]></name>
    <configKey><![CDATA[AssignCollectionUnique]]></configKey>
    <description>
      <![CDATA[The Collections.unique() method mutates the list and returns the list as a value. If you are assigning the result of unique() to a variable, then you probably don't realize that you're also modifying the original list as well. This is frequently the cause of subtle bugs.]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ClosureAsLastMethodParameterRule' priority='MINOR'>
    <name><![CDATA[codenarc: closure as last method parameter rule]]></name>
    <configKey><![CDATA[ClosureAsLastMethodParameter]]></configKey>
    <description>
      <![CDATA[If a method is called and the last parameter is an inline closure then it can be declared outside of the method call brackets.]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.CollectAllIsDeprecatedRule' priority='MINOR'>
    <name><![CDATA[codenarc: collect all is deprecated rule]]></name>
    <configKey><![CDATA[CollectAllIsDeprecated]]></configKey>
    <description><![CDATA[collectAll{} is deprecated since Groovy 1.8.1. Use collectNested instead{}.]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ConfusingMultipleReturnsRule' priority='MINOR'>
    <name><![CDATA[codenarc: confusing multiple returns rule]]></name>
    <configKey><![CDATA[ConfusingMultipleReturns]]></configKey>
    <description>
      <![CDATA[Multiple return values can be used to set several variables at once. To use multiple return values, the left hand side of the assignment must be enclosed in parenthesis. If not, then you are not using multiple return values, you're only assigning the last element.]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitArrayListInstantiationRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit array list instantiation rule]]></name>
    <configKey><![CDATA[ExplicitArrayListInstantiation]]></configKey>
    <description>
      <![CDATA[This rule checks for the explicit instantiation of a ArrayList using the no-arg constructor. In Groovy, it is best to write "new ArrayList()" as "[]", which creates the same object.]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitCallToAndMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit call to and method rule]]></name>
    <configKey><![CDATA[ExplicitCallToAndMethod]]></configKey>
    <description>
      <![CDATA[This rule detects when the and(Object) method is called directly in code instead of using the & operator. A groovier way to express this: a.and(b) is this: a & b]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitCallToCompareToMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit call to compare to method rule]]></name>
    <configKey><![CDATA[ExplicitCallToCompareToMethod]]></configKey>
    <description>
      <![CDATA[This rule detects when the compareTo(Object) method is called directly in code instead of using the <=>, >, >=, <, and <= operators. A groovier way to express this: a.compareTo(b) is this: a <=> b, or using the other operators.]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitCallToDivMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit call to div method rule]]></name>
    <configKey><![CDATA[ExplicitCallToDivMethod]]></configKey>
    <description>
      <![CDATA[This rule detects when the div(Object) method is called directly in code instead of using the / operator. A groovier way to express this: a.div(b) is this: a / b]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitCallToEqualsMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit call to equals method rule]]></name>
    <configKey><![CDATA[ExplicitCallToEqualsMethod]]></configKey>
    <description>
      <![CDATA[This rule detects when the equals(Object) method is called directly in code instead of using the == or != operator. A groovier way to express this: a.equals(b) is this: a == b and a groovier way to express : !a.equals(b) is : a != b]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitCallToGetAtMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit call to get at method rule]]></name>
    <configKey><![CDATA[ExplicitCallToGetAtMethod]]></configKey>
    <description>
      <![CDATA[This rule detects when the getAt(Object) method is called directly in code instead of using the [] index operator. A groovier way to express this: a.getAt(b) is this: a[b]]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitCallToLeftShiftMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit call to left shift method rule]]></name>
    <configKey><![CDATA[ExplicitCallToLeftShiftMethod]]></configKey>
    <description>
      <![CDATA[This rule detects when the leftShift(Object) method is called directly in code instead of using the << operator. A groovier way to express this: a.leftShift(b) is this: a << b]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitCallToMinusMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit call to minus method rule]]></name>
    <configKey><![CDATA[ExplicitCallToMinusMethod]]></configKey>
    <description>
      <![CDATA[This rule detects when the minus(Object) method is called directly in code instead of using the - operator. A groovier way to express this: a.minus(b) is this: a - b]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitCallToModMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit call to mod method rule]]></name>
    <configKey><![CDATA[ExplicitCallToModMethod]]></configKey>
    <description>
      <![CDATA[This rule detects when the mod(Object) method is called directly in code instead of using the % operator. A groovier way to express this: a.mod(b) is this: a % b]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitCallToMultiplyMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit call to multiply method rule]]></name>
    <configKey><![CDATA[ExplicitCallToMultiplyMethod]]></configKey>
    <description>
      <![CDATA[This rule detects when the minus(Object) method is called directly in code instead of using the * operator. A groovier way to express this: a.multiply(b) is this: a * b]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitCallToOrMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit call to or method rule]]></name>
    <configKey><![CDATA[ExplicitCallToOrMethod]]></configKey>
    <description>
      <![CDATA[This rule detects when the or(Object) method is called directly in code instead of using the | operator. A groovier way to express this: a.or(b) is this: a | b]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitCallToPlusMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit call to plus method rule]]></name>
    <configKey><![CDATA[ExplicitCallToPlusMethod]]></configKey>
    <description>
      <![CDATA[This rule detects when the plus(Object) method is called directly in code instead of using the + operator. A groovier way to express this: a.plus(b) is this: a + b]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitCallToPowerMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit call to power method rule]]></name>
    <configKey><![CDATA[ExplicitCallToPowerMethod]]></configKey>
    <description>
      <![CDATA[This rule detects when the power(Object) method is called directly in code instead of using the ** operator. A groovier way to express this: a.power(b) is this: a ** b]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitCallToRightShiftMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit call to right shift method rule]]></name>
    <configKey><![CDATA[ExplicitCallToRightShiftMethod]]></configKey>
    <description>
      <![CDATA[This rule detects when the rightShift(Object) method is called directly in code instead of using the >> operator. A groovier way to express this: a.rightShift(b) is this: a >> b]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitCallToXorMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit call to xor method rule]]></name>
    <configKey><![CDATA[ExplicitCallToXorMethod]]></configKey>
    <description>
      <![CDATA[This rule detects when the xor(Object) method is called directly in code instead of using the ^ operator. A groovier way to express this: a.xor(b) is this: a ^ b]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitHashMapInstantiationRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit hash map instantiation rule]]></name>
    <configKey><![CDATA[ExplicitHashMapInstantiation]]></configKey>
    <description>
      <![CDATA[This rule checks for the explicit instantiation of a HashMap using the no-arg constructor. In Groovy, it is best to write "new HashMap()" as "[:]", which creates the same object.]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitHashSetInstantiationRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit hash set instantiation rule]]></name>
    <configKey><![CDATA[ExplicitHashSetInstantiation]]></configKey>
    <description>
      <![CDATA[This rule checks for the explicit instantiation of a HashSet using the no-arg constructor. In Groovy, it is best to write "new HashSet()" as "[] as Set", which creates the same object.]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitLinkedHashMapInstantiationRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit linked hash map instantiation rule]]></name>
    <configKey><![CDATA[ExplicitLinkedHashMapInstantiation]]></configKey>
    <description>
      <![CDATA[This rule checks for the explicit instantiation of a LinkedHashMap using the no-arg constructor. In Groovy, it is best to write "new LinkedHashMap()" as "[:]", which creates the same object.]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitLinkedListInstantiationRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit linked list instantiation rule]]></name>
    <configKey><![CDATA[ExplicitLinkedListInstantiation]]></configKey>
    <description>
      <![CDATA[This rule checks for the explicit instantiation of a LinkedList using the no-arg constructor. In Groovy, it is best to write "new LinkedList()" as "[] as Queue", which creates the same object.]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitStackInstantiationRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit stack instantiation rule]]></name>
    <configKey><![CDATA[ExplicitStackInstantiation]]></configKey>
    <description>
      <![CDATA[This rule checks for the explicit instantiation of a Stack using the no-arg constructor. In Groovy, it is best to write "new Stack()" as "[] as Stack", which creates the same object.]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.ExplicitTreeSetInstantiationRule' priority='MINOR'>
    <name><![CDATA[codenarc: explicit tree set instantiation rule]]></name>
    <configKey><![CDATA[ExplicitTreeSetInstantiation]]></configKey>
    <description>
      <![CDATA[This rule checks for the explicit instantiation of a TreeSet using the no-arg constructor. In Groovy, it is best to write "new TreeSet()" as "[] as SortedSet", which creates the same object.]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.GetterMethodCouldBePropertyRule' priority='MINOR'>
    <name><![CDATA[codenarc: getter method could be property rule]]></name>
    <configKey><![CDATA[GetterMethodCouldBeProperty]]></configKey>
    <description>
      <![CDATA[If a class defines a public method that follows the Java getter notation, and returns a constant, then it is cleaner to provide a Groovy property for the value rather than a Groovy method.]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.GroovyLangImmutableRule' priority='MINOR'>
    <name><![CDATA[codenarc: groovy lang immutable rule]]></name>
    <configKey><![CDATA[GroovyLangImmutable]]></configKey>
    <description>
      <![CDATA[The groovy.lang.Immutable annotation has been deprecated and replaced by groovy.transform.Immutable. Do not use the Immutable in groovy.lang.]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.GStringAsMapKeyRule' priority='MINOR'>
    <name><![CDATA[codenarc: g string as map key rule]]></name>
    <configKey><![CDATA[GStringAsMapKey]]></configKey>
    <description>
      <![CDATA[A GString should not be used as a map key since its hashcode is not guaranteed to be stable. Consider calling key.toString().]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.UseCollectManyRule' priority='MINOR'>
    <name><![CDATA[codenarc: use collect many rule]]></name>
    <configKey><![CDATA[UseCollectMany]]></configKey>
    <description>
      <![CDATA[In many case collectMany() yields the same result as collect{}.flatten(). It is easier to understand and more clearly conveys the intent.]]></description>
  </rule>
  <rule key='org.codenarc.rule.groovyism.UseCollectNestedRule' priority='MINOR'>
    <name><![CDATA[codenarc: use collect nested rule]]></name>
    <configKey><![CDATA[UseCollectNested]]></configKey>
    <description><![CDATA[Instead of nested collect{}-calls use collectNested{}]]></description>
  </rule>
  <rule key='org.codenarc.rule.imports.DuplicateImportRule' priority='MINOR'>
    <name><![CDATA[codenarc: duplicate import rule]]></name>
    <configKey><![CDATA[DuplicateImport]]></configKey>
    <description><![CDATA[Duplicate import statements are unnecessary.]]></description>
  </rule>
  <rule key='org.codenarc.rule.imports.ImportFromSamePackageRule' priority='MINOR'>
    <name><![CDATA[codenarc: import from same package rule]]></name>
    <configKey><![CDATA[ImportFromSamePackage]]></configKey>
    <description><![CDATA[An import of a class that is within the same package is unnecessary.]]></description>
  </rule>
  <rule key='org.codenarc.rule.imports.ImportFromSunPackagesRule' priority='MINOR'>
    <name><![CDATA[codenarc: import from sun packages rule]]></name>
    <configKey><![CDATA[ImportFromSunPackages]]></configKey>
    <description>
      <![CDATA[Avoid importing anything from the 'sun.*' packages. These packages are not portable and are likely to change.]]></description>
  </rule>
  <rule key='org.codenarc.rule.imports.MisorderedStaticImportsRule' priority='MINOR'>
    <name><![CDATA[codenarc: misordered static imports rule]]></name>
    <configKey><![CDATA[MisorderedStaticImports]]></configKey>
    <description><![CDATA[Static imports should never be declared after nonstatic imports.]]></description>
  </rule>
  <rule key='org.codenarc.rule.imports.UnnecessaryGroovyImportRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary groovy import rule]]></name>
    <configKey><![CDATA[UnnecessaryGroovyImport]]></configKey>
    <description>
      <![CDATA[A Groovy file does not need to include an import for classes from java.lang, java.util, java.io, java.net, groovy.lang and groovy.util, as well as the classes java.math.BigDecimal and java.math.BigInteger.]]></description>
  </rule>
  <rule key='org.codenarc.rule.imports.UnusedImportRule' priority='MINOR'>
    <name><![CDATA[codenarc: unused import rule]]></name>
    <configKey><![CDATA[UnusedImport]]></configKey>
    <description>
      <![CDATA[Imports for a class that is never referenced within the source file is unnecessary.]]></description>
  </rule>
  <rule key='org.codenarc.rule.jdbc.DirectConnectionManagementRule' priority='MINOR'>
    <name><![CDATA[codenarc: direct connection management rule]]></name>
    <configKey><![CDATA[DirectConnectionManagement]]></configKey>
    <description>
      <![CDATA[The J2EE standard requires that applications use the container's resource management facilities to obtain connections to resources. Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard.]]></description>
  </rule>
  <rule key='org.codenarc.rule.jdbc.JdbcConnectionReferenceRule' priority='MINOR'>
    <name><![CDATA[codenarc: jdbc connection reference rule]]></name>
    <configKey><![CDATA[JdbcConnectionReference]]></configKey>
    <description>
      <![CDATA[Check for direct use of java.sql.Connection, which is discouraged and almost never necessary in application code.]]></description>
  </rule>
  <rule key='org.codenarc.rule.jdbc.JdbcResultSetReferenceRule' priority='MINOR'>
    <name><![CDATA[codenarc: jdbc result set reference rule]]></name>
    <configKey><![CDATA[JdbcResultSetReference]]></configKey>
    <description>
      <![CDATA[Check for direct use of java.sql.ResultSet, which is not necessary if using the Groovy Sql facility or an ORM framework such as Hibernate.]]></description>
  </rule>
  <rule key='org.codenarc.rule.jdbc.JdbcStatementReferenceRule' priority='MINOR'>
    <name><![CDATA[codenarc: jdbc statement reference rule]]></name>
    <configKey><![CDATA[JdbcStatementReference]]></configKey>
    <description>
      <![CDATA[Check for direct use of java.sql.Statement, java.sql.PreparedStatement, or java.sql.CallableStatement, which is not necessary if using the Groovy Sql facility or an ORM framework such as Hibernate.]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.ChainedTestRule' priority='MINOR'>
    <name><![CDATA[codenarc: chained test rule]]></name>
    <configKey><![CDATA[ChainedTest]]></configKey>
    <description>
      <![CDATA[A test method that invokes another test method is a chained test; the methods are dependent on one another. Tests should be isolated, and not be dependent on one another.]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.CoupledTestCaseRule' priority='MINOR'>
    <name><![CDATA[codenarc: coupled test case rule]]></name>
    <configKey><![CDATA[CoupledTestCase]]></configKey>
    <description>
      <![CDATA[This rule finds test cases that are coupled to other test cases, either by invoking static methods on another test case or by creating instances of another test case. If you require shared logic in test cases then extract that logic to a new class where it can properly be reused.]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.JUnitAssertAlwaysFailsRule' priority='MINOR'>
    <name><![CDATA[codenarc: j unit assert always fails rule]]></name>
    <configKey><![CDATA[JUnitAssertAlwaysFails]]></configKey>
    <description>
      <![CDATA[Checks for JUnit assert() method calls with constant arguments such that the assertion always fails. This includes: assertTrue(false), assertFalse(true) and assertNull(CONSTANT).]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.JUnitAssertAlwaysSucceedsRule' priority='MINOR'>
    <name><![CDATA[codenarc: j unit assert always succeeds rule]]></name>
    <configKey><![CDATA[JUnitAssertAlwaysSucceeds]]></configKey>
    <description>
      <![CDATA[Checks for JUnit assert() method calls with constant arguments such that the assertion always succeeds. This includes: assertTrue(true), assertFalse(false) and assertNull(null).]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.JUnitFailWithoutMessageRule' priority='MINOR'>
    <name><![CDATA[codenarc: j unit fail without message rule]]></name>
    <configKey><![CDATA[JUnitFailWithoutMessage]]></configKey>
    <description>
      <![CDATA[This rule detects JUnit calling the fail() method without an argument. For better error reporting you should always provide a message.]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.JUnitLostTestRule' priority='MINOR'>
    <name><![CDATA[codenarc: j unit lost test rule]]></name>
    <configKey><![CDATA[JUnitLostTest]]></configKey>
    <description>
      <![CDATA[Checks for classes that import JUnit 4 classes and contain a public, instance, void, no-arg method named test* that is not annotated with @Test.]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.JUnitPublicNonTestMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: j unit public non test method rule]]></name>
    <configKey><![CDATA[JUnitPublicNonTestMethod]]></configKey>
    <description>
      <![CDATA[Checks if a JUnit test class contains public methods other than standard test methods, JUnit framework methods or methods with JUnit annotations.]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.JUnitSetUpCallsSuperRule' priority='MINOR'>
    <name><![CDATA[codenarc: j unit set up calls super rule]]></name>
    <configKey><![CDATA[JUnitSetUpCallsSuper]]></configKey>
    <description>
      <![CDATA[Checks that if the JUnit setUp() method is defined, that it includes a call to super.setUp().]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.JUnitStyleAssertionsRule' priority='MINOR'>
    <name><![CDATA[codenarc: j unit style assertions rule]]></name>
    <configKey><![CDATA[JUnitStyleAssertions]]></configKey>
    <description>
      <![CDATA[This rule detects calling JUnit style assertions like assertEquals, assertTrue, assertFalse, assertNull, assertNotNull. Groovy 1.7 ships with a feature called the "power assert", which is an assert statement with better error reporting. This is preferable to the JUnit assertions.]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.JUnitTearDownCallsSuperRule' priority='MINOR'>
    <name><![CDATA[codenarc: j unit tear down calls super rule]]></name>
    <configKey><![CDATA[JUnitTearDownCallsSuper]]></configKey>
    <description>
      <![CDATA[Checks that if the JUnit tearDown() method is defined, that it includes a call to super.tearDown().]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.JUnitTestMethodWithoutAssertRule' priority='MINOR'>
    <name><![CDATA[codenarc: j unit test method without assert rule]]></name>
    <configKey><![CDATA[JUnitTestMethodWithoutAssert]]></configKey>
    <description>
      <![CDATA[This rule searches for test methods that do not contain assert statements. Either the test method is missing assert statements, which is an error, or the test method contains custom assert statements that do not follow a proper assert naming convention. Test methods are defined as public void methods that begin with the work test or have a @Test annotation. By default this rule applies to the default test class names, but this can be changed using the rule's applyToClassNames property.]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.JUnitUnnecessarySetUpRule' priority='MINOR'>
    <name><![CDATA[codenarc: j unit unnecessary set up rule]]></name>
    <configKey><![CDATA[JUnitUnnecessarySetUp]]></configKey>
    <description><![CDATA[Checks for JUnit setUp() methods that contain only a call to super.setUp().]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.JUnitUnnecessaryTearDownRule' priority='MINOR'>
    <name><![CDATA[codenarc: j unit unnecessary tear down rule]]></name>
    <configKey><![CDATA[JUnitUnnecessaryTearDown]]></configKey>
    <description>
      <![CDATA[Checks for JUnit tearDown() methods that contain only a call to super.tearDown().]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.JUnitUnnecessaryThrowsExceptionRule' priority='MINOR'>
    <name><![CDATA[codenarc: j unit unnecessary throws exception rule]]></name>
    <configKey><![CDATA[JUnitUnnecessaryThrowsException]]></configKey>
    <description>
      <![CDATA[Check for throws clauses on JUnit test methods. That is not necessary in Groovy.]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.SpockIgnoreRestUsedRule' priority='MINOR'>
    <name><![CDATA[codenarc: spock ignore rest used rule]]></name>
    <configKey><![CDATA[SpockIgnoreRestUsed]]></configKey>
    <description>
      <![CDATA[If Spock's @IgnoreRest appears on any method, all non-annotated test methods are not executed. This behaviour is almost always unintended. It's fine to use @IgnoreRest locally during development, but when committing code, it should be removed.]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.UnnecessaryFailRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary fail rule]]></name>
    <configKey><![CDATA[UnnecessaryFail]]></configKey>
    <description>
      <![CDATA[In a unit test, catching an exception and immediately calling Assert.fail() is pointless and hides the stack trace. It is better to rethrow the exception or not catch the exception at all.]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.UseAssertEqualsInsteadOfAssertTrueRule' priority='MINOR'>
    <name><![CDATA[codenarc: use assert equals instead of assert true rule]]></name>
    <configKey><![CDATA[UseAssertEqualsInsteadOfAssertTrue]]></configKey>
    <description>
      <![CDATA[This rule detects JUnit assertions in object equality. These assertions should be made by more specific methods, like assertEquals.]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.UseAssertFalseInsteadOfNegationRule' priority='MINOR'>
    <name><![CDATA[codenarc: use assert false instead of negation rule]]></name>
    <configKey><![CDATA[UseAssertFalseInsteadOfNegation]]></configKey>
    <description>
      <![CDATA[In unit tests, if a condition is expected to be false then there is no sense using assertTrue with the negation operator. For instance, assertTrue(!condition) can always be simplified to assertFalse(condition)]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.UseAssertNullInsteadOfAssertEqualsRule' priority='MINOR'>
    <name><![CDATA[codenarc: use assert null instead of assert equals rule]]></name>
    <configKey><![CDATA[UseAssertNullInsteadOfAssertEquals]]></configKey>
    <description>
      <![CDATA[This rule detects JUnit calling assertEquals where the first or second parameter is null. These assertion should be made against the assertNull method instead.]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.UseAssertSameInsteadOfAssertTrueRule' priority='MINOR'>
    <name><![CDATA[codenarc: use assert same instead of assert true rule]]></name>
    <configKey><![CDATA[UseAssertSameInsteadOfAssertTrue]]></configKey>
    <description>
      <![CDATA[This rule detects JUnit calling assertTrue where the first or second parameter is an Object#is() call testing for reference equality. These assertion should be made against the assertSame method instead.]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.UseAssertTrueInsteadOfAssertEqualsRule' priority='MINOR'>
    <name><![CDATA[codenarc: use assert true instead of assert equals rule]]></name>
    <configKey><![CDATA[UseAssertTrueInsteadOfAssertEquals]]></configKey>
    <description>
      <![CDATA[This rule detects JUnit calling assertEquals where the first parameter is a boolean. These assertions should be made by more specific methods, like assertTrue or assertFalse.]]></description>
  </rule>
  <rule key='org.codenarc.rule.junit.UseAssertTrueInsteadOfNegationRule' priority='MINOR'>
    <name><![CDATA[codenarc: use assert true instead of negation rule]]></name>
    <configKey><![CDATA[UseAssertTrueInsteadOfNegation]]></configKey>
    <description>
      <![CDATA[In unit tests, if a condition is expected to be true then there is no sense using assertFalse with the negation operator. For instance, assertFalse(!condition) can always be simplified to assertTrue(condition)]]></description>
  </rule>
  <rule key='org.codenarc.rule.logging.LoggerForDifferentClassRule' priority='MINOR'>
    <name><![CDATA[codenarc: logger for different class rule]]></name>
    <configKey><![CDATA[LoggerForDifferentClass]]></configKey>
    <description>
      <![CDATA[Checks for instantiating a logger (Log4J, SLF4J, Logback, Apache Commons Logging or Java Util Logging) for a class other than the current class.]]></description>
  </rule>
  <rule key='org.codenarc.rule.logging.LoggerWithWrongModifiersRule' priority='MINOR'>
    <name><![CDATA[codenarc: logger with wrong modifiers rule]]></name>
    <configKey><![CDATA[LoggerWithWrongModifiers]]></configKey>
    <description>
      <![CDATA[Logger objects should be declared private, static and final. If subclasses should have access to a Logger in a parent class then the Logger should be declared protected, non-static and final. This rule find loggers that are not declared with these modifiers.]]></description>
  </rule>
  <rule key='org.codenarc.rule.logging.LoggingSwallowsStacktraceRule' priority='MINOR'>
    <name><![CDATA[codenarc: logging swallows stacktrace rule]]></name>
    <configKey><![CDATA[LoggingSwallowsStacktrace]]></configKey>
    <description>
      <![CDATA[If you are logging an exception then the proper API is to call error(Object, Throwable), which will log the message and the exception stack trace. If you call error(Object) then the stacktrace may not be logged.]]></description>
  </rule>
  <rule key='org.codenarc.rule.logging.MultipleLoggersRule' priority='MINOR'>
    <name><![CDATA[codenarc: multiple loggers rule]]></name>
    <configKey><![CDATA[MultipleLoggers]]></configKey>
    <description>
      <![CDATA[This rule catches classes that have more than one logger object defined. Typically, a class has zero or one logger objects.]]></description>
  </rule>
  <rule key='org.codenarc.rule.logging.PrintlnRule' priority='MINOR'>
    <name><![CDATA[codenarc: println rule]]></name>
    <configKey><![CDATA[Println]]></configKey>
    <description><![CDATA[Checks for calls to this.print(), this.println() or this.printf().]]></description>
  </rule>
  <rule key='org.codenarc.rule.logging.PrintStackTraceRule' priority='MINOR'>
    <name><![CDATA[codenarc: print stack trace rule]]></name>
    <configKey><![CDATA[PrintStackTrace]]></configKey>
    <description><![CDATA[Checks for calls to printStackTrace().]]></description>
  </rule>
  <rule key='org.codenarc.rule.logging.SystemErrPrintRule' priority='MINOR'>
    <name><![CDATA[codenarc: system err print rule]]></name>
    <configKey><![CDATA[SystemErrPrint]]></configKey>
    <description>
      <![CDATA[Checks for calls to System.err.print(), System.err.println() or System.err.printf().]]></description>
  </rule>
  <rule key='org.codenarc.rule.logging.SystemOutPrintRule' priority='MINOR'>
    <name><![CDATA[codenarc: system out print rule]]></name>
    <configKey><![CDATA[SystemOutPrint]]></configKey>
    <description>
      <![CDATA[Checks for calls to System.out.print(), System.out.println() or System.out.printf().]]></description>
  </rule>
  <rule key='org.codenarc.rule.naming.AbstractClassNameRule' priority='MINOR'>
    <name><![CDATA[codenarc: abstract class name rule]]></name>
    <configKey><![CDATA[AbstractClassName]]></configKey>
    <description>
      <![CDATA[Verifies that the name of an abstract class matches a regular expression specified in the regex property. If that property is null or empty, then this rule is not applied (i.e., it does nothing). It defaults to null, so this rule must be explicitly configured to be active. This rule ignores interfaces.]]></description>
  </rule>
  <rule key='org.codenarc.rule.naming.ClassNameRule' priority='MINOR'>
    <name><![CDATA[codenarc: class name rule]]></name>
    <configKey><![CDATA[ClassName]]></configKey>
    <description>
      <![CDATA[Verifies that the name of a class matches a regular expression. By default it checks that the class name starts with an uppercase letter and is followed by zero or more word characters (letters, numbers or underscores). The regex property specifies the regular expression used to validate the class name.]]></description>
  </rule>
  <rule key='org.codenarc.rule.naming.ConfusingMethodNameRule' priority='MINOR'>
    <name><![CDATA[codenarc: confusing method name rule]]></name>
    <configKey><![CDATA[ConfusingMethodName]]></configKey>
    <description>
      <![CDATA[Checks for confusing method names. The referenced methods have names that differ only by capitalization. This is very confusing because if the capitalization were identical then one of the methods would override the other.]]></description>
  </rule>
  <rule key='org.codenarc.rule.naming.FactoryMethodNameRule' priority='MINOR'>
    <name><![CDATA[codenarc: factory method name rule]]></name>
    <configKey><![CDATA[FactoryMethodName]]></configKey>
    <description>
      <![CDATA[A factory method is a method that creates objects, and they are typically named either buildFoo(), makeFoo(), or createFoo(). This rule enforces that only one naming convention is used. It defaults to makeFoo(), but that can be changed using the property 'regex'.]]></description>
  </rule>
  <rule key='org.codenarc.rule.naming.FieldNameRule' priority='MINOR'>
    <name><![CDATA[codenarc: field name rule]]></name>
    <configKey><![CDATA[FieldName]]></configKey>
    <description>
      <![CDATA[Verifies that the name of each field matches a regular expression. By default it checks that non-'final' field names start with a lowercase letter and contains only letters or numbers, and 'final' field names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The regex property specifies the default regular expression used to validate field names. The finalRegex property specifies the regular expression to validate 'final' field names. The staticRegex property specifies the regular expression to validate 'static' field names. The staticFinalRegex property specifies the regular expression to validate 'static final' field names.  The ignoreFieldNames property (${rule.ignoreFieldNames}) can specify field names that should be ignored, optionally containing wildcard characters ('*' or '?').]]></description>
  </rule>
  <rule key='org.codenarc.rule.naming.InterfaceNameRule' priority='MINOR'>
    <name><![CDATA[codenarc: interface name rule]]></name>
    <configKey><![CDATA[InterfaceName]]></configKey>
    <description>
      <![CDATA[Verifies that the name of an interface matches a regular expression specified in the regex property. If that property is null or empty, then this rule is not applied (i.e., it does nothing). It defaults to null, so this rule must be explicitly configured to be active.]]></description>
  </rule>
  <rule key='org.codenarc.rule.naming.MethodNameRule' priority='MINOR'>
    <name><![CDATA[codenarc: method name rule]]></name>
    <configKey><![CDATA[MethodName]]></configKey>
    <description>
      <![CDATA[Verifies that the name of each method matches a regular expression. By default it checks that the method name starts with a lowercase letter. The regex property specifies the regular expression to check the method name against.  The ignoreMethodNames property (${rule.ignoreMethodNames}) can specify method names that should be ignored, optionally containing wildcard characters ('*' or '?').]]></description>
  </rule>
  <rule key='org.codenarc.rule.naming.ObjectOverrideMisspelledMethodNameRule' priority='MINOR'>
    <name><![CDATA[codenarc: object override misspelled method name rule]]></name>
    <configKey><![CDATA[ObjectOverrideMisspelledMethodName]]></configKey>
    <description>
      <![CDATA[Verifies that the names of the most commonly overridden methods of Object: equals, hashCode and toString, are correct.]]></description>
  </rule>
  <rule key='org.codenarc.rule.naming.PackageNameRule' priority='MINOR'>
    <name><![CDATA[codenarc: package name rule]]></name>
    <configKey><![CDATA[PackageName]]></configKey>
    <description>
      <![CDATA[Verifies that the package name for a class matches a regular expression. By default it checks that the package name consists of only lowercase letters, separated by periods. The regex property specifies the regular expression used to validate the package name. The packageNameRequired property indicates whether a package name declaration is required for all classes.]]></description>
  </rule>
  <rule key='org.codenarc.rule.naming.ParameterNameRule' priority='MINOR'>
    <name><![CDATA[codenarc: parameter name rule]]></name>
    <configKey><![CDATA[ParameterName]]></configKey>
    <description>
      <![CDATA[Verifies that the name of each parameter matches a regular expression. This rule applies to method parameters, constructor parameters and closure parameters. By default it checks that parameter names start with a lowercase letter and contains only letters or numbers. The regex property specifies the default regular expression used to validate the parameter name.  The ignoreParameterNames property (${rule.ignoreParameterNames}) can specify parameter names that should be ignored, optionally containing wildcard characters ('*' or '?').]]></description>
  </rule>
  <rule key='org.codenarc.rule.naming.PropertyNameRule' priority='MINOR'>
    <name><![CDATA[codenarc: property name rule]]></name>
    <configKey><![CDATA[PropertyName]]></configKey>
    <description>
      <![CDATA[Verifies that the name of each property matches a regular expression. By default it checks that property names other than 'static final' start with a lowercase letter and contains only letters or numbers, and 'static final' property names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The regex property specifies the default regular expression used to validate property names. The finalRegex property specifies the regular expression to validate 'final' property names. The staticRegex property specifies the regular expression to validate 'static' property names. The staticFinalRegex property specifies the regular expression to validate 'static final' property names.  The ignorePropertyNames property (${rule.ignorePropertyNames}) can specify property names that should be ignored, optionally containing wildcard characters ('*' or '?').]]></description>
  </rule>
  <rule key='org.codenarc.rule.naming.VariableNameRule' priority='MINOR'>
    <name><![CDATA[codenarc: variable name rule]]></name>
    <configKey><![CDATA[VariableName]]></configKey>
    <description>
      <![CDATA[Verifies that the name of each method matches a regular expression. By default it checks that non-'final' variable names start with a lowercase letter and contains only letters or numbers, and 'final' variable names start with an uppercase letter and contain only uppercase letters, numbers and underscores. The regex property specifies the default regular expression used to validate a non-'final' variable name. The finalRegex property specifies the regular expression used to validate 'final' variable names. The ignoreVariableNames property (${rule.ignoreVariableNames}) can specify variable names that should be ignored, optionally containing wildcard characters ('*' or '?').]]></description>
  </rule>
  <rule key='org.codenarc.rule.security.FileCreateTempFileRule' priority='MINOR'>
    <name><![CDATA[codenarc: file create temp file rule]]></name>
    <configKey><![CDATA[FileCreateTempFile]]></configKey>
    <description>
      <![CDATA[The File.createTempFile() method is insecure, and has been deprecated by the ESAPI secure coding library. It has been replaced by the ESAPI Randomizer.getRandomFilename(String) method.]]></description>
  </rule>
  <rule key='org.codenarc.rule.security.InsecureRandomRule' priority='MINOR'>
    <name><![CDATA[codenarc: insecure random rule]]></name>
    <configKey><![CDATA[InsecureRandom]]></configKey>
    <description>
      <![CDATA[Reports usages of java.util.Random, which can produce very predictable results. If two instances of Random are created with the same seed and sequence of method calls, they will generate the exact same results. Use java.security.SecureRandom instead, which provides a cryptographically strong random number generator. SecureRandom uses PRNG, which means they are using a deterministic algorithm to produce a pseudo-random number from a true random seed. SecureRandom produces non-deterministic output.]]></description>
  </rule>
  <rule key='org.codenarc.rule.security.JavaIoPackageAccessRule' priority='MINOR'>
    <name><![CDATA[codenarc: java io package access rule]]></name>
    <configKey><![CDATA[JavaIoPackageAccess]]></configKey>
    <description>
      <![CDATA[This rule reports violations of the Enterprise JavaBeans specification by using the java.io package to access files or the file system.]]></description>
  </rule>
  <rule key='org.codenarc.rule.security.NonFinalPublicFieldRule' priority='MINOR'>
    <name><![CDATA[codenarc: non final public field rule]]></name>
    <configKey><![CDATA[NonFinalPublicField]]></configKey>
    <description>
      <![CDATA[Finds code that violates secure coding principles for mobile code by declaring a member variable public but not final.]]></description>
  </rule>
  <rule key='org.codenarc.rule.security.NonFinalSubclassOfSensitiveInterfaceRule' priority='MINOR'>
    <name><![CDATA[codenarc: non final subclass of sensitive interface rule]]></name>
    <configKey><![CDATA[NonFinalSubclassOfSensitiveInterface]]></configKey>
    <description>
      <![CDATA[The permissions classes such as java.security.Permission and java.security.BasicPermission are designed to be extended. Classes that derive from these permissions classes, however, must prohibit extension. This prohibition ensures that malicious subclasses cannot change the properties of the derived class. Classes that implement sensitive interfaces such as java.security.PrivilegedAction and java.security.PrivilegedActionException must also be declared final for analogous reasons.]]></description>
  </rule>
  <rule key='org.codenarc.rule.security.ObjectFinalizeRule' priority='MINOR'>
    <name><![CDATA[codenarc: object finalize rule]]></name>
    <configKey><![CDATA[ObjectFinalize]]></configKey>
    <description>
      <![CDATA[The finalize() method should only be called by the JVM after the object has been garbage collected.]]></description>
  </rule>
  <rule key='org.codenarc.rule.security.PublicFinalizeMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: public finalize method rule]]></name>
    <configKey><![CDATA[PublicFinalizeMethod]]></configKey>
    <description>
      <![CDATA[Creates a violation when the program violates secure coding principles by declaring a finalize() method public.]]></description>
  </rule>
  <rule key='org.codenarc.rule.security.SystemExitRule' priority='MINOR'>
    <name><![CDATA[codenarc: system exit rule]]></name>
    <configKey><![CDATA[SystemExit]]></configKey>
    <description>
      <![CDATA[Web applications should never call System.exit(). A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application.]]></description>
  </rule>
  <rule key='org.codenarc.rule.security.UnsafeArrayDeclarationRule' priority='MINOR'>
    <name><![CDATA[codenarc: unsafe array declaration rule]]></name>
    <configKey><![CDATA[UnsafeArrayDeclaration]]></configKey>
    <description>
      <![CDATA[Triggers a violation when an array is declared public, final, and static. Secure coding principles state that, in most cases, an array declared public, final and static is a bug because arrays are mutable objects.]]></description>
  </rule>
  <rule key='org.codenarc.rule.serialization.SerializableClassMustDefineSerialVersionUIDRule' priority='MINOR'>
    <name><![CDATA[codenarc: serializable class must define serial version u i d rule]]></name>
    <configKey><![CDATA[SerializableClassMustDefineSerialVersionUID]]></configKey>
    <description>
      <![CDATA[Classes that implement Serializable should define a serialVersionUID. If you don't define serialVersionUID, the system will make one by hashing most of your class's features. Then if you change anything, the UID will change and Java won't let you reload old data.]]></description>
  </rule>
  <rule key='org.codenarc.rule.serialization.SerialPersistentFieldsRule' priority='MINOR'>
    <name><![CDATA[codenarc: serial persistent fields rule]]></name>
    <configKey><![CDATA[SerialPersistentFields]]></configKey>
    <description>
      <![CDATA[To use a Serializable object's serialPersistentFields correctly, it must be declared private, static, and final.]]></description>
  </rule>
  <rule key='org.codenarc.rule.serialization.SerialVersionUIDRule' priority='MINOR'>
    <name><![CDATA[codenarc: serial version u i d rule]]></name>
    <configKey><![CDATA[SerialVersionUID]]></configKey>
    <description>
      <![CDATA[A serialVersionUID is normally intended to be used with Serialization. It needs to be of type long, static, and final. Also, it should have a visibility modifier such as public or private. Providing no modifier creates a Property and Groovy generates a getter, which is probably not intended.]]></description>
  </rule>
  <rule key='org.codenarc.rule.size.AbcComplexityRule' priority='MINOR'>
    <name><![CDATA[codenarc: abc complexity rule]]></name>
    <configKey><![CDATA[AbcComplexity]]></configKey>
    <description>
      <![CDATA[Checks the ABC metric of size/complexity for methods/classes.A method (or "closure field") with an ABC complexity value (score) greater than the maxMethodComplexity property (${rule.maxMethodComplexity}) causes a violation. Likewise, a class that has an (average method) ABC complexityvalue greater than the maxClassAverageMethodComplexity property (${rule.maxClassAverageMethodComplexity}) causes a violation. [DEPRECATED: Use AbcMetric rule instead]]]></description>
  </rule>
  <rule key='org.codenarc.rule.size.AbcMetricRule' priority='MINOR'>
    <name><![CDATA[codenarc: abc metric rule]]></name>
    <configKey><![CDATA[AbcMetric]]></configKey>
    <description>
      <![CDATA[Checks the ABC size metric for methods/classes. A method (or "closure field") with an ABC score greater than the maxMethodAbcScore property (${rule.maxMethodAbcScore}) causes a violation. Likewise, a class that has an (average method) ABC score greater than the maxClassAverageMethodAbcScore property (${rule.maxClassAverageMethodAbcScore}) causes a violation.]]></description>
  </rule>
  <rule key='org.codenarc.rule.size.ClassSizeRule' priority='MINOR'>
    <name><![CDATA[codenarc: class size rule]]></name>
    <configKey><![CDATA[ClassSize]]></configKey>
    <description>
      <![CDATA[Checks if the size of a class exceeds the number of lines specified by the maxLines property (${rule.maxLines}).]]></description>
  </rule>
  <rule key='org.codenarc.rule.size.CrapMetricRule' priority='MINOR'>
    <name><![CDATA[codenarc: crap metric rule]]></name>
    <configKey><![CDATA[CrapMetric]]></configKey>
    <description>
      <![CDATA[Checks the CRAP (Change Risk Anti-Patterns) score for methods/classes. The CRAP metric score is based on the cyclomatic complexity and test coverage for individual methods. A method with a CRAP value greater than the maxMethodCrapScore property (${rule.maxMethodCrapScore}) causes a violation. Likewise, a class that has an (average method) CRAP value greater than the maxClassAverageMethodCrapScore property (${rule.maxClassAverageMethodCrapScore}) causes a violation.]]></description>
  </rule>
  <rule key='org.codenarc.rule.size.CyclomaticComplexityRule' priority='MINOR'>
    <name><![CDATA[codenarc: cyclomatic complexity rule]]></name>
    <configKey><![CDATA[CyclomaticComplexity]]></configKey>
    <description>
      <![CDATA[Checks the cyclomatic complexity for methods/classes.A method (or "closure field") with a cyclomatic complexity value greater than the maxMethodComplexity property (${rule.maxMethodComplexity}) causes a violation. Likewise, a class that has an (average method) cyclomatic complexityvalue greater than the maxClassAverageMethodComplexity property (${rule.maxClassAverageMethodComplexity}) causes a violation.]]></description>
  </rule>
  <rule key='org.codenarc.rule.size.MethodCountRule' priority='MINOR'>
    <name><![CDATA[codenarc: method count rule]]></name>
    <configKey><![CDATA[MethodCount]]></configKey>
    <description>
      <![CDATA[A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects. The <em>maxMethods</em> property (${rule.maxMethods}) specifies the threshold.]]></description>
  </rule>
  <rule key='org.codenarc.rule.size.MethodSizeRule' priority='MINOR'>
    <name><![CDATA[codenarc: method size rule]]></name>
    <configKey><![CDATA[MethodSize]]></configKey>
    <description>
      <![CDATA[Checks if the size of a method exceeds the number of lines specified by the maxLines property (${rule.maxLines}).]]></description>
  </rule>
  <rule key='org.codenarc.rule.size.NestedBlockDepthRule' priority='MINOR'>
    <name><![CDATA[codenarc: nested block depth rule]]></name>
    <configKey><![CDATA[NestedBlockDepth]]></configKey>
    <description>
      <![CDATA[Checks for blocks or closures nested more than maxNestedBlockDepth (${rule.maxNestedBlockDepth}) levels deep.]]></description>
  </rule>
  <rule key='org.codenarc.rule.StubRule' priority='CRITICAL'>
    <name><![CDATA[codenarc: stub rule]]></name>
    <configKey><![CDATA[Stub]]></configKey>
    <description><![CDATA[null]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.AddEmptyStringRule' priority='MINOR'>
    <name><![CDATA[codenarc: add empty string rule]]></name>
    <configKey><![CDATA[AddEmptyString]]></configKey>
    <description>
      <![CDATA[Finds empty string literals which are being added. This is an inefficient way to convert any type to a String.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.ConsecutiveLiteralAppendsRule' priority='MINOR'>
    <name><![CDATA[codenarc: consecutive literal appends rule]]></name>
    <configKey><![CDATA[ConsecutiveLiteralAppends]]></configKey>
    <description>
      <![CDATA[Violations occur when method calls to append(Object) are chained together with literals as parameters. The chained calls can be joined into one invocation.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.ConsecutiveStringConcatenationRule' priority='MINOR'>
    <name><![CDATA[codenarc: consecutive string concatenation rule]]></name>
    <configKey><![CDATA[ConsecutiveStringConcatenation]]></configKey>
    <description>
      <![CDATA[Catches concatenation of two string literals on the same line. These can safely by joined.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryBigDecimalInstantiationRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary big decimal instantiation rule]]></name>
    <configKey><![CDATA[UnnecessaryBigDecimalInstantiation]]></configKey>
    <description>
      <![CDATA[It is unnecessary to instantiate BigDecimal objects. Instead just use the decimal literal or the 'G' identifier to force the type, such as 123.45 or 123.45G.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryBigIntegerInstantiationRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary big integer instantiation rule]]></name>
    <configKey><![CDATA[UnnecessaryBigIntegerInstantiation]]></configKey>
    <description>
      <![CDATA[It is unnecessary to instantiate BigInteger objects. Instead just use the literal with the 'G' identifier to force the type, such as 8G or 42G.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryBooleanExpressionRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary boolean expression rule]]></name>
    <configKey><![CDATA[UnnecessaryBooleanExpression]]></configKey>
    <description>
      <![CDATA[Checks for unnecessary boolean expressions, including ANDing (&&) or ORing (||) with true, false, null, or a Map/List/String/Number literal. Also checks for negation (!) of true, false, null, or a Map/List/String/Number literal.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryBooleanInstantiationRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary boolean instantiation rule]]></name>
    <configKey><![CDATA[UnnecessaryBooleanInstantiation]]></configKey>
    <description>
      <![CDATA[Use Boolean.valueOf() for variable values or Boolean.TRUE and Boolean.FALSE for constant values instead of calling the Boolean() constructor directly or calling Boolean.valueOf(true) or Boolean.valueOf(false).]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryCallForLastElementRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary call for last element rule]]></name>
    <configKey><![CDATA[UnnecessaryCallForLastElement]]></configKey>
    <description>
      <![CDATA[This rule checks for excessively verbose methods of accessing the last element of an array or list. For instance, it is possible to access the last element of an array by performing array[array.length - 1], in Groovy it is simpler to either call array.last() or array[-1]. The same is true for lists. This violation is triggered whenever a get, getAt, or array-style access is used with an object size check.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryCallToSubstringRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary call to substring rule]]></name>
    <configKey><![CDATA[UnnecessaryCallToSubstring]]></configKey>
    <description>
      <![CDATA[Calling String.substring(0) always returns the original string. This code is meaningless.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryCatchBlockRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary catch block rule]]></name>
    <configKey><![CDATA[UnnecessaryCatchBlock]]></configKey>
    <description>
      <![CDATA[Violations are triggered when a catch block does nothing but throw the original exception. In this scenario there is usually no need for a catch block, just let the exception be thrown from the original code. This condition frequently occurs when catching an exception for debugging purposes but then forgetting to take the catch statement out.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryCollectCallRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary collect call rule]]></name>
    <configKey><![CDATA[UnnecessaryCollectCall]]></configKey>
    <description>
      <![CDATA[Some method calls to Object.collect(Closure) can be replaced with the spread operator. For instance, list.collect { it.multiply(2) } can be replaced by list*.multiply(2).]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryCollectionCallRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary collection call rule]]></name>
    <configKey><![CDATA[UnnecessaryCollectionCall]]></configKey>
    <description>
      <![CDATA[Useless call to collections. This call doesn't make sense. For any collection c, calling c.containsAll(c) should always be true, and c.retainAll(c) should have no effect.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryConstructorRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary constructor rule]]></name>
    <configKey><![CDATA[UnnecessaryConstructor]]></configKey>
    <description>
      <![CDATA[This rule detects when a constructor is not necessary; i.e., when there's only one constructor, it's public, has an empty body, and takes no arguments.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryDefInFieldDeclarationRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary def in field declaration rule]]></name>
    <configKey><![CDATA[UnnecessaryDefInFieldDeclaration]]></configKey>
    <description>
      <![CDATA[If a field has a visibility modifier or a type declaration, then the def keyword is unneeded. For instance, 'static def constraints = {}' is redundant and can be simplified to 'static constraints = {}.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryDefInMethodDeclarationRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary def in method declaration rule]]></name>
    <configKey><![CDATA[UnnecessaryDefInMethodDeclaration]]></configKey>
    <description>
      <![CDATA[If a method has a visibility modifier or a type declaration, then the def keyword is unneeded. For instance 'def private method() {}' is redundant and can be simplified to 'private method() {}'.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryDefInVariableDeclarationRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary def in variable declaration rule]]></name>
    <configKey><![CDATA[UnnecessaryDefInVariableDeclaration]]></configKey>
    <description>
      <![CDATA[If a variable has a visibility modifier or a type declaration, then the def keyword is unneeded. For instance 'def private n = 2' is redundant and can be simplified to 'private n = 2'.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryDotClassRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary dot class rule]]></name>
    <configKey><![CDATA[UnnecessaryDotClass]]></configKey>
    <description>
      <![CDATA[To make a reference to a class, it is unnecessary to specify the '.class' identifier. For instance String.class can be shortened to String.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryDoubleInstantiationRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary double instantiation rule]]></name>
    <configKey><![CDATA[UnnecessaryDoubleInstantiation]]></configKey>
    <description>
      <![CDATA[It is unnecessary to instantiate Double objects. Instead just use the double literal or the 'D' identifier to force the type, such as 123.45d or 0.42d.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryElseStatementRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary else statement rule]]></name>
    <configKey><![CDATA[UnnecessaryElseStatement]]></configKey>
    <description>
      <![CDATA[When an if statement block ends with a return statement the else is unnecessary. The logic in the else branch can be run without being in a new scope.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryFinalOnPrivateMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary final on private method rule]]></name>
    <configKey><![CDATA[UnnecessaryFinalOnPrivateMethod]]></configKey>
    <description>
      <![CDATA[A private method is marked final. Private methods cannot be overridden, so marking it final is unnecessary.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryFloatInstantiationRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary float instantiation rule]]></name>
    <configKey><![CDATA[UnnecessaryFloatInstantiation]]></configKey>
    <description>
      <![CDATA[It is unnecessary to instantiate Float objects. Instead just use the float literal with the 'F' identifier to force the type, such as 123.45F or 0.42f.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryGetterRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary getter rule]]></name>
    <configKey><![CDATA[UnnecessaryGetter]]></configKey>
    <description>
      <![CDATA[Checks for explicit calls to getter/accessor methods which can, for the most part, be replaced by property access. A getter is defined as a method call that matches get[A-Z] but not getClass() or get[A-Z][A-Z] such as getURL(). Getters do not take method arguments.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryGStringRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary g string rule]]></name>
    <configKey><![CDATA[UnnecessaryGString]]></configKey>
    <description>
      <![CDATA[String objects should be created with single quotes, and GString objects created with double quotes. Creating normal String objects with double quotes is confusing to readers.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryIfStatementRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary if statement rule]]></name>
    <configKey><![CDATA[UnnecessaryIfStatement]]></configKey>
    <description>
      <![CDATA[Checks for if statements where the if and else blocks are merely returning true and false constants. These cases can be replaced by a simple return statement.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryInstanceOfCheckRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary instance of check rule]]></name>
    <configKey><![CDATA[UnnecessaryInstanceOfCheck]]></configKey>
    <description>
      <![CDATA[This rule finds instanceof checks that cannot possibly evaluate to true. For instance, checking that (!variable instanceof String) will never be true because the result of a not expression is always a boolean.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryInstantiationToGetClassRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary instantiation to get class rule]]></name>
    <configKey><![CDATA[UnnecessaryInstantiationToGetClass]]></configKey>
    <description>
      <![CDATA[Avoid instantiating an object just to call getClass() on it; use the .class public member instead.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryIntegerInstantiationRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary integer instantiation rule]]></name>
    <configKey><![CDATA[UnnecessaryIntegerInstantiation]]></configKey>
    <description>
      <![CDATA[It is unnecessary to instantiate Integer objects. Instead just use the literal with the 'I' identifier to force the type, such as 8I or 42i.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryLongInstantiationRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary long instantiation rule]]></name>
    <configKey><![CDATA[UnnecessaryLongInstantiation]]></configKey>
    <description>
      <![CDATA[It is unnecessary to instantiate Long objects. Instead just use the literal with the 'L' identifier to force the type, such as 8L or 42L.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryModOneRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary mod one rule]]></name>
    <configKey><![CDATA[UnnecessaryModOne]]></configKey>
    <description>
      <![CDATA[Any expression mod 1 (exp % 1) is guaranteed to always return zero. This code is probably an error, and should be either (exp & 1) or (exp % 2).]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryNullCheckBeforeInstanceOfRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary null check before instance of rule]]></name>
    <configKey><![CDATA[UnnecessaryNullCheckBeforeInstanceOf]]></configKey>
    <description>
      <![CDATA[There is no need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryNullCheckRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary null check rule]]></name>
    <configKey><![CDATA[UnnecessaryNullCheck]]></configKey>
    <description>
      <![CDATA[Groovy contains the safe dereference operator, which can be used in boolean conditional statements to safely replace explicit "x == null" tests.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryObjectReferencesRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary object references rule]]></name>
    <configKey><![CDATA[UnnecessaryObjectReferences]]></configKey>
    <description>
      <![CDATA[Violations are triggered when an excessive set of consecutive statements all reference the same variable. This can be made more readable by using a with or identity block.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryOverridingMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary overriding method rule]]></name>
    <configKey><![CDATA[UnnecessaryOverridingMethod]]></configKey>
    <description><![CDATA[The overriding method merely calls the same method defined in a superclass]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryPackageReferenceRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary package reference rule]]></name>
    <configKey><![CDATA[UnnecessaryPackageReference]]></configKey>
    <description>
      <![CDATA[Checks for explicit package reference for classes that Groovy imports by default, such as java.lang.String, java.util.Map and groovy.lang.Closure.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryParenthesesForMethodCallWithClosureRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary parentheses for method call with closure rule]]></name>
    <configKey><![CDATA[UnnecessaryParenthesesForMethodCallWithClosure]]></configKey>
    <description>
      <![CDATA[If a method is called and the only parameter to that method is an inline closure then the parentheses of the method call can be omitted.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryPublicModifierRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary public modifier rule]]></name>
    <configKey><![CDATA[UnnecessaryPublicModifier]]></configKey>
    <description><![CDATA[The 'public' modifier is not required on methods or classes.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryReturnKeywordRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary return keyword rule]]></name>
    <configKey><![CDATA[UnnecessaryReturnKeyword]]></configKey>
    <description>
      <![CDATA[In Groovy, the return keyword is often optional. If a statement is the last line in a method or closure then you do not need to have the return keyword.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessarySelfAssignmentRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary self assignment rule]]></name>
    <configKey><![CDATA[UnnecessarySelfAssignment]]></configKey>
    <description><![CDATA[Method contains a pointless self-assignment to a variable or property.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessarySemicolonRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary semicolon rule]]></name>
    <configKey><![CDATA[UnnecessarySemicolon]]></configKey>
    <description>
      <![CDATA[Semicolons as line terminators are not required in Groovy: remove them. Do not use a semicolon as a replacement for empty braces on for and while loops; this is a confusing practice.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryStringInstantiationRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary string instantiation rule]]></name>
    <configKey><![CDATA[UnnecessaryStringInstantiation]]></configKey>
    <description>
      <![CDATA[Use a String literal (e.g., "...") instead of calling the corresponding String constructor (new String("..")) directly.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessarySubstringRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary substring rule]]></name>
    <configKey><![CDATA[UnnecessarySubstring]]></configKey>
    <description>
      <![CDATA[This rule finds usages of String.substring(int) and String.substring(int, int) that can be replaced by use of the subscript operator. For instance, var.substring(5) can be replaced with var[5..-1].]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryTernaryExpressionRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary ternary expression rule]]></name>
    <configKey><![CDATA[UnnecessaryTernaryExpression]]></configKey>
    <description>
      <![CDATA[Checks for ternary expressions where the conditional expression always evaluates to a boolean and the true and false expressions are merely returning true and false constants. Also checks for ternary expressions where both expressions are the same constant or variable.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unnecessary.UnnecessaryTransientModifierRule' priority='MINOR'>
    <name><![CDATA[codenarc: unnecessary transient modifier rule]]></name>
    <configKey><![CDATA[UnnecessaryTransientModifier]]></configKey>
    <description>
      <![CDATA[The field is marked as transient, but the class isn't Serializable, so marking it as transient has no effect.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unused.UnusedArrayRule' priority='MINOR'>
    <name><![CDATA[codenarc: unused array rule]]></name>
    <configKey><![CDATA[UnusedArray]]></configKey>
    <description>
      <![CDATA[Checks for array allocations that are not assigned or used, unless it is the last statement within a block.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unused.UnusedMethodParameterRule' priority='MINOR'>
    <name><![CDATA[codenarc: unused method parameter rule]]></name>
    <configKey><![CDATA[UnusedMethodParameter]]></configKey>
    <description>
      <![CDATA[This rule finds instances of method parameters not being used. It does not analyze private methods (that is done by the UnusedPrivateMethodParameter rule) or methods marked @Override.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unused.UnusedObjectRule' priority='MINOR'>
    <name><![CDATA[codenarc: unused object rule]]></name>
    <configKey><![CDATA[UnusedObject]]></configKey>
    <description>
      <![CDATA[Checks for object allocations that are not assigned or used, unless it is the last statement within a block.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unused.UnusedPrivateFieldRule' priority='MINOR'>
    <name><![CDATA[codenarc: unused private field rule]]></name>
    <configKey><![CDATA[UnusedPrivateField]]></configKey>
    <description><![CDATA[Checks for private fields that are not referenced within the same class.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unused.UnusedPrivateMethodParameterRule' priority='MINOR'>
    <name><![CDATA[codenarc: unused private method parameter rule]]></name>
    <configKey><![CDATA[UnusedPrivateMethodParameter]]></configKey>
    <description>
      <![CDATA[Checks for parameters to private methods that are not referenced within the method body.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unused.UnusedPrivateMethodRule' priority='MINOR'>
    <name><![CDATA[codenarc: unused private method rule]]></name>
    <configKey><![CDATA[UnusedPrivateMethod]]></configKey>
    <description><![CDATA[Checks for private methods that are not referenced within the same class.]]></description>
  </rule>
  <rule key='org.codenarc.rule.unused.UnusedVariableRule' priority='MINOR'>
    <name><![CDATA[codenarc: unused variable rule]]></name>
    <configKey><![CDATA[UnusedVariable]]></configKey>
    <description>
      <![CDATA[Checks for variables that are never referenced. The ignoreVariableNames property (${rule.ignoreVariableNames}) specifies one or more variable names that should be ignored, optionally containing wildcard characters ('*' or '?').]]></description>
  </rule>
</rules>